diff --git a/includes/common.inc b/includes/common.inc
index c97704c..a60cb05 100644
--- a/includes/common.inc
+++ b/includes/common.inc
@@ -451,15 +451,21 @@ function drupal_get_query_parameters(array $query = NULL, array $exclude = array
  * @param $query
  *   The query string to split.
  *
+ * @param $decode
+ *   Defaults to TRUE. Boolean flag indicating that the return value should be
+ *   URL-decoded.
+ *
  * @return
  *   An array of URL decoded couples $param_name => $value.
  */
-function drupal_get_query_array($query) {
+function drupal_get_query_array($query, $decode = TRUE) {
   $result = array();
   if (!empty($query)) {
     foreach (explode('&', $query) as $param) {
       $param = explode('=', $param, 2);
-      $result[$param[0]] = isset($param[1]) ? rawurldecode($param[1]) : '';
+      $key = ($decode) ? rawurldecode($param[0]) : $param[0];
+      $value = isset($param[1]) ? ($decode) ? rawurldecode($param[1]) : $param[1] : '';
+      $result[$key] = $value;
     }
   }
   return $result;
@@ -475,7 +481,9 @@ function drupal_get_query_array($query) {
  *   The query parameter array to be processed, e.g. $_GET.
  * @param $parent
  *   Internal use only. Used to build the $query array key for nested items.
- *
+ * @param $encode
+ *   Defaults to TRUE. Boolean flag indicating that the return value should be
+ *   URL-encoded.
  * @return
  *   A rawurlencoded string which can be used as or appended to the URL query
  *   string.
@@ -483,15 +491,16 @@ function drupal_get_query_array($query) {
  * @see drupal_get_query_parameters()
  * @ingroup php_wrappers
  */
-function drupal_http_build_query(array $query, $parent = '') {
+function drupal_http_build_query(array $query, $encode = TRUE, $parent = '') {
   $params = array();
 
   foreach ($query as $key => $value) {
-    $key = ($parent ? $parent . '[' . rawurlencode($key) . ']' : rawurlencode($key));
+    $raw_key = ($encode) ? rawurlencode($key) : $key;
+    $key = ($parent ? $parent . '[' . $raw_key . ']' : $raw_key);
 
     // Recurse into children.
     if (is_array($value)) {
-      $params[] = drupal_http_build_query($value, $key);
+      $params[] = drupal_http_build_query($value, $encode, $key);
     }
     // If a query parameter value is NULL, only append its key.
     elseif (!isset($value)) {
@@ -499,7 +508,8 @@ function drupal_http_build_query(array $query, $parent = '') {
     }
     else {
       // For better readability of paths in query strings, we decode slashes.
-      $params[] = $key . '=' . str_replace('%2F', '/', rawurlencode($value));
+      $raw_value = ($encode) ? rawurlencode($value) : $value;
+      $params[] = $key . '=' . str_replace('%2F', '/', $raw_value);
     }
   }
 
@@ -2190,6 +2200,8 @@ function format_username($account) {
  *   elements:
  *   - 'query': An array of query key/value-pairs (without any URL-encoding) to
  *     append to the URL.
+ *  - 'encode': Defaults to TRUE. Boolean flag indicating that the return value
+ *     of query parameters should be URL-encoded.
  *   - 'fragment': A fragment identifier (named anchor) to append to the URL.
  *     Do not include the leading '#' character.
  *   - 'absolute': Defaults to FALSE. Whether to force the output to be an
@@ -2233,7 +2245,8 @@ function url($path = NULL, array $options = array()) {
     'query' => array(),
     'absolute' => FALSE,
     'alias' => FALSE,
-    'prefix' => ''
+    'prefix' => '',
+    'encode' => TRUE,
   );
 
   if (!isset($options['external'])) {
@@ -2261,7 +2274,7 @@ function url($path = NULL, array $options = array()) {
     }
     // Append the query.
     if ($options['query']) {
-      $path .= (strpos($path, '?') !== FALSE ? '&' : '?') . drupal_http_build_query($options['query']);
+      $path .= (strpos($path, '?') !== FALSE ? '&' : '?') . drupal_http_build_query($options['query'], $options['encode']);
     }
     if (isset($options['https']) && variable_get('https', FALSE)) {
       if ($options['https'] === TRUE) {
@@ -2318,7 +2331,7 @@ function url($path = NULL, array $options = array()) {
   if (!empty($GLOBALS['conf']['clean_url'])) {
     $path = drupal_encode_path($prefix . $path);
     if ($options['query']) {
-      return $base . $path . '?' . drupal_http_build_query($options['query']) . $options['fragment'];
+      return $base . $path . '?' . drupal_http_build_query($options['query'], $options['encode']) . $options['fragment'];
     }
     else {
       return $base . $path . $options['fragment'];
diff --git a/includes/menu.inc b/includes/menu.inc
index 05ecac0..73dbe96 100644
--- a/includes/menu.inc
+++ b/includes/menu.inc
@@ -1636,6 +1636,12 @@ function theme_menu_link(array $variables) {
   $element = $variables['element'];
   $sub_menu = '';
 
+  // Set the encode option to FALSE for query parameter so query parameters
+  // does not encode.
+  if (isset($element['#localized_options']['query'])) {
+    $element['#localized_options']['encode'] = FALSE;
+  }
+
   if ($element['#below']) {
     $sub_menu = drupal_render($element['#below']);
   }
@@ -1875,6 +1881,11 @@ function menu_navigation_links($menu_name, $level = 0) {
         $class = ' active-trail';
         $l['attributes']['class'][] = 'active-trail';
       }
+      // If query parameter available set the encode option to FALSE for query
+      // parameter so query parameters does not encode.
+      if (!empty($item['link']['options']) && isset($item['link']['options']['query'])) {
+        $l['encode'] = FALSE;
+      }
       // Normally, l() compares the href of every link with $_GET['q'] and sets
       // the active class accordingly. But local tasks do not appear in menu
       // trees, so if the current path is a local task, and this link is its
diff --git a/modules/menu/menu.admin.inc b/modules/menu/menu.admin.inc
index a24703c..104d4c3 100644
--- a/modules/menu/menu.admin.inc
+++ b/modules/menu/menu.admin.inc
@@ -99,6 +99,11 @@ function _menu_overview_tree_form($tree) {
       $mlid = 'mlid:' . $item['mlid'];
       $form[$mlid]['#item'] = $item;
       $form[$mlid]['#attributes'] = $item['hidden'] ? array('class' => array('menu-disabled')) : array('class' => array('menu-enabled'));
+      // Set the encode option to FALSE for query parameter so query parameters
+      // does not encode.
+      if (isset($item['localized_options']['query'])) {
+        $item['localized_options']['encode'] = FALSE;
+      }
       $form[$mlid]['title']['#markup'] = l($item['title'], $item['href'], $item['localized_options']);
       if ($item['hidden']) {
         $form[$mlid]['title']['#markup'] .= ' (' . t('disabled') . ')';
@@ -295,7 +300,7 @@ function menu_edit_item($form, &$form_state, $type, $item, $menu) {
 
   $path = $item['link_path'];
   if (isset($item['options']['query'])) {
-    $path .= '?' . drupal_http_build_query($item['options']['query']);
+    $path .= '?' . drupal_http_build_query($item['options']['query'], FALSE);
   }
   if (isset($item['options']['fragment'])) {
     $path .= '#' . $item['options']['fragment'];
@@ -383,7 +388,7 @@ function menu_edit_item_validate($form, &$form_state) {
   if (!url_is_external($item['link_path'])) {
     $parsed_link = parse_url($item['link_path']);
     if (isset($parsed_link['query'])) {
-      $item['options']['query'] = drupal_get_query_array($parsed_link['query']);
+      $item['options']['query'] = drupal_get_query_array($parsed_link['query'], FALSE);
     }
     else {
       // Use unset() rather than setting to empty string
