<?php
/**
 * @file
 * Code for the osha_taxonomies feature.
 */

include_once 'osha_taxonomies.features.inc';

define('OSHA_TAXONOMIES_TAGS', 'tags');
define('OSHA_TAXONOMIES_NACE_CODES', 'nace_codes');
define('OSHA_TAXONOMIES_THESAURUS', 'thesaurus');

function osha_taxonomies_add_subcategory_to_category($tags_vocabulary, $tid, $subcategory_name) {
  $term = taxonomy_term_load($tid);
  if ($terms = taxonomy_term_load_multiple(
    array(),
    array(
      'name' => trim($subcategory_name),
      'vid' => $tags_vocabulary->vid,
    )
  )) {
    $tag_term = array_pop($terms);
    $term->field_tags[LANGUAGE_NONE][] = ['tid' => $tag_term->tid];
    taxonomy_term_save($term);
  }
  else {
    watchdog('osha_taxonomies', 'tag @name not found', array('@name' => $subcategory_name), WATCHDOG_ERROR);
  }
}

function osha_taxonomies_update_main_category() {
  $tags_vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  $vocabulary = taxonomy_vocabulary_machine_name_load('main_category');
  $tree = taxonomy_get_tree($vocabulary->vid);
  foreach ($tree as $term) {
    if (($term->name == 'Accident prevention') || ($term->name == 'Ageing and OSH')) {
      osha_taxonomies_add_subcategory_to_category($tags_vocabulary, $term->tid, $term->name);
      continue;
    }
    if ($term->parents[0]) {
      osha_taxonomies_add_subcategory_to_category($tags_vocabulary, $term->parents[0], $term->name);
    }
  }
}

function osha_taxonomies_delete_main_subcategory() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('main_category');
  $tree = taxonomy_get_tree($vocabulary->vid);
  foreach ($tree as $term) {
    if ($term->parents[0]) {
      taxonomy_term_delete($term->tid);
    }
  }
}

function osha_taxonomies_import_tag_category() {
  $new_tree =
    ".Accident prevention
  Accident prevention
  Danger
  Hidden hazards
  Prevention
  Site security
  Slips, trips and falls
.Ageing and OSH
  Ageing and OSH
Agriculture and forestry
  Agriculture
  Farming
  Forestry
Dangerous substances
  Chemicals
  Dust
  Nanomaterials
  Passive smoking
Education
  Mainstreaming OSH into education
Emergencies and First Aid
  Emergency
  Emergency procedure
  Emergency routes
  First aid
Environment
  Cold weather
Fire and explosion
  Explosives
  Fire
Good OSH is good business
  Cost of accidents
Handling loads
  Carrying loads
  Heavy loads
  Manual handling
  Overhead loads
  Safe loads
HORECA
  Catering
ICT/digitalisation
  Computer work
  Mobile phones
Leadership and worker participation
  Behaviour
  Communication
  Improvisation
  Induction
  Job rotation
  No control
  Office work
  Participation
  Production
  Safety culture
  Maintenance
Floor covering
  Good housekeeping
  Lock out
  Machinery
Musculoskeletal disorders (MSDs)
  Ergonomics
  Hand-arm vibration
  Posture
Noise
  Hearing loss
Personal protective equipment (PPE)
  Footwear
Physical risks
  Cuts
  Dehydration
  Heat stress
  Heat stroke
  Metalwork
  Pregnancy
  Respiratory
  Skin protection
  Exhaustion
Psychosocial risks and stress
  Burnout
  Confined spaces
  Harassment
  Heavy workload
  Job uncertainty
  Pressure
  Relaxation
Signs and labels
  Compulsory signs
  Emergency signs
  Prohibition signs
  Safety signs
Transport
  Fork lift trucks
  Road safety
  Road transport
  Site transport
Work environment
  Leisure and lifestyle
  Lighting
  No smoking
  Office safety
  Safe routes";
  $new_tree = explode("\n", $new_tree);

  // STEP 1 (create new)
  $name = 'tags';
  $vocabulary = taxonomy_vocabulary_machine_name_load($name);
  $tree = taxonomy_get_tree($vocabulary->vid);
  $tags_map = [];
  foreach ($tree as $i => $term) {
    $tags_map[$term->tid] = $term;
    $tags_map[$term->name] = $term->tid;
  }

  foreach($new_tree as $row) {
    $name = trim($row);
    if (empty($tags_map[$name])) {
      $term = new stdClass();
      $term->name = $term->name_field['en'][0]['value'] = $name;
      $term->vid = $vocabulary->vid;
      $term->language = 'en';
      taxonomy_term_save($term);
      $tags_map[$term->tid] = $term;
      $tags_map[$term->name] = $term->tid;
    }
  }

  // STEP 2 (set parents)

  $main = '';
  foreach($new_tree as $row) {
    $name = trim($row);
    if (strlen($row) == strlen($name)) {
      $main = trim($row);
    }
    else {
      $main_tid = $tags_map[$main];
      $tid = $tags_map[$name];
      $term = $tags_map[$tid];
      if ($term->parents[0] != $main_tid) {
        $term->parent = $main_tid;
        taxonomy_term_save($term);
      }
    }
  }
}

function osha_taxonomies_import_main_category() {
  $file = sprintf('%s/data/main_category.json', dirname(__FILE__));
  if (!is_readable($file)) {
    drupal_set_message("Cannot read taxonomy file! ($file).", 'warning');
  }
  else {
    $json = json_decode(file_get_contents($file), TRUE);
    $vocabulary = 'main_category';
    $voc = taxonomy_vocabulary_machine_name_load($vocabulary);
    if (empty($voc)) {
      drupal_set_message("$vocabulary doesn't exits!", 'warning');
    }
    else {
      if (empty($json)) {
        drupal_set_message("Empty taxonomy $vocabulary found in file!", 'warning');
      }
      else {
        $parents = [];
        foreach ($json['map'] as $parent => $terms) {
          if (empty($json['terms'][$parent])) {
            watchdog('osha_taxonomies', 'No translation found for: !name', array('!name' => $parent), WATCHDOG_WARNING);
            $json['terms'][$parent] = ['en' => $parent];
          }
          foreach ($terms as $term) {
            $parents[$term] = $parent;
            if (empty($json['terms'][$term])) {
              watchdog('osha_taxonomies', 'No translation found for: !name', array('!name' => $term), WATCHDOG_WARNING);
              $json['terms'][$term] = ['en' => $term];
            }
          }
        }
        $weight = 0;
        $map = [];
        foreach ($json as $term_name => $term_data) {
          $term_parent_name = $term_data['parent'];
          $term_names = $term_data['terms'];

          $term = taxonomy_get_term_by_name($term_name, $vocabulary);
          if (!empty($term)) {
            reset($term);
            $term = current($term);
            $map[$term_name] = $term->tid;
            continue;
          }
          // Creating the term.
          $term = new stdClass();
          $term->name = $term->name_field['en'][0]['value'] = $term_name;
          $term->vid = $voc->vid;
          $term->language = 'en';
          $term->weight = $weight++;

          if ($term_parent_name && !empty($map[$term_parent_name])) {
            $term->parent = $map[$term_parent_name];
          }

          taxonomy_term_save($term);
          $map[$term_name] = $term->tid;

          if (!empty($term->tid)) {
            unset($term_names['en']);
            // Setting Translations.
            $translation_handler = entity_translation_get_handler('taxonomy_term', $term);
            $term->translations = $translation_handler->getTranslations();
            foreach ($term_names as $lang => $name) {
              if (!isset($term->translations->data[$lang])) {
                $translation_handler->setTranslation(array(
                  'translate' => 0,
                  'status' => 1,
                  'uid' => 1,
                  'language' => $lang,
                  'source' => 'en',
                ));
              }
              $term->name_field[$lang][0]['value'] = $name;
            }
            taxonomy_term_save($term);
          }
          else {
            drupal_set_message("$term->name could not be saved!", 'warning');
          }
        }
      }
    }
  }
}
