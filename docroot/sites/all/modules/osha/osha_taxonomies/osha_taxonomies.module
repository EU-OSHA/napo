<?php
/**
 * @file
 * Code for the osha_taxonomies feature.
 */

include_once 'osha_taxonomies.features.inc';

define('OSHA_TAXONOMIES_TAGS', 'tags');
define('OSHA_TAXONOMIES_NACE_CODES', 'nace_codes');
define('OSHA_TAXONOMIES_THESAURUS', 'thesaurus');

function osha_taxonomies_add_subcategory_to_category($tags_vocabulary, $tid, $subcategory_name) {
  $term = taxonomy_term_load($tid);
  if ($terms = taxonomy_term_load_multiple(
    array(),
    array(
      'name' => trim($subcategory_name),
      'vid' => $tags_vocabulary->vid,
    )
  )) {
    if (count($terms) > 1) {
      krumo('error '. $subcategory_name, $terms);
    }
    if (count($terms) > 1) {
    }
    $tag_term = array_pop($terms);
    $term->field_tags[LANGUAGE_NONE][] = ['tid' => $tag_term->tid];
    taxonomy_term_save($term);
  }
  else {
    watchdog('osha_taxonomies', 'tag @name not found', array('@name' => $subcategory_name), WATCHDOG_ERROR);
  }
}

function osha_taxonomies_update_main_category() {
  $tags_vocabulary = taxonomy_vocabulary_machine_name_load('tags');
  $vocabulary = taxonomy_vocabulary_machine_name_load('main_category');
  $tree = taxonomy_get_tree($vocabulary->vid);
  foreach ($tree as $term) {
    if (($term->name == 'Accident prevention') || ($term->name == 'Ageing and OSH')) {
      osha_taxonomies_add_subcategory_to_category($tags_vocabulary, $term->tid, $term->name);
      continue;
    }
    if ($term->parents[0]) {
      osha_taxonomies_add_subcategory_to_category($tags_vocabulary, $term->parents[0], $term->name);
    }
  }
}

function osha_taxonomies_delete_main_subcategory() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('main_category');
  $tree = taxonomy_get_tree($vocabulary->vid);
  foreach ($tree as $term) {
    if ($term->parents[0]) {
      taxonomy_term_delete($term->tid);
    }
  }
}

function osha_taxonomies_import_main_category() {
  $file = sprintf('%s/data/main_category.json', dirname(__FILE__));
  if (!is_readable($file)) {
    drupal_set_message("Cannot read taxonomy file! ($file).", 'warning');
  }
  else {
    $json = json_decode(file_get_contents($file), TRUE);
    $vocabulary = 'main_category';
    $voc = taxonomy_vocabulary_machine_name_load($vocabulary);
    if (empty($voc)) {
      drupal_set_message("$vocabulary doesn't exits!", 'warning');
    }
    else {
      if (empty($json)) {
        drupal_set_message("Empty taxonomy $vocabulary found in file!", 'warning');
      }
      else {
        $parents = [];
        foreach ($json['map'] as $parent => $terms) {
          if (empty($json['terms'][$parent])) {
            watchdog('osha_taxonomies', 'No translation found for: !name', array('!name' => $parent), WATCHDOG_WARNING);
            $json['terms'][$parent] = ['en' => $parent];
          }
          foreach ($terms as $term) {
            $parents[$term] = $parent;
            if (empty($json['terms'][$term])) {
              watchdog('osha_taxonomies', 'No translation found for: !name', array('!name' => $term), WATCHDOG_WARNING);
              $json['terms'][$term] = ['en' => $term];
            }
          }
        }
        $weight = 0;
        $map = [];
        foreach ($json as $term_name => $term_data) {
          $term_parent_name = $term_data['parent'];
          $term_names = $term_data['terms'];

          $term = taxonomy_get_term_by_name($term_name, $vocabulary);
          if (!empty($term)) {
            reset($term);
            $term = current($term);
            $map[$term_name] = $term->tid;
            continue;
          }
          // Creating the term.
          $term = new stdClass();
          $term->name = $term->name_field['en'][0]['value'] = $term_name;
          $term->vid = $voc->vid;
          $term->language = 'en';
          $term->weight = $weight++;

          if ($term_parent_name && !empty($map[$term_parent_name])) {
            $term->parent = $map[$term_parent_name];
          }

          taxonomy_term_save($term);
          $map[$term_name] = $term->tid;

          if (!empty($term->tid)) {
            unset($term_names['en']);
            // Setting Translations.
            $translation_handler = entity_translation_get_handler('taxonomy_term', $term);
            $term->translations = $translation_handler->getTranslations();
            foreach ($term_names as $lang => $name) {
              if (!isset($term->translations->data[$lang])) {
                $translation_handler->setTranslation(array(
                  'translate' => 0,
                  'status' => 1,
                  'uid' => 1,
                  'language' => $lang,
                  'source' => 'en',
                ));
              }
              $term->name_field[$lang][0]['value'] = $name;
            }
            taxonomy_term_save($term);
          }
          else {
            drupal_set_message("$term->name could not be saved!", 'warning');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function osha_taxonomies_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['field_main_topic_category'])) {
    $def_main_tags = $form['field_main_topic_category'][LANGUAGE_NONE]['#default_value'];
    $def_tags = $form['field_tags'][LANGUAGE_NONE]['#default_value'];
    $tags = $form['field_tags'][LANGUAGE_NONE]['#options'];
    $states = [];
    $vocabulary = taxonomy_vocabulary_machine_name_load('main_category');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $main_tag = [];
    foreach ($terms as $term) {
      foreach($term->field_tags[LANGUAGE_NONE] as $tag) {
        if (!$def_main_tags &&
          $def_tags &&
          in_array($tag['tid'], $def_tags)
        ) {
          $main_tag[$term->name] = $term->name;
        }
        else {
          $states['#edit-field-tags-und-' . $tag['tid']] = ['visible' => ['#edit-field-main-topic-category-und' => ['value' => $term->tid]]];
        }
        unset($tags[$tag['tid']]);
      }
    }

    if (!$def_main_tags && $def_tags) {
      drupal_set_message('Please select Main category ' . implode(', ', $main_tag));
    }
    $no_parent_tid = variable_get('no_parent_tid', 0);
    foreach($tags as $tid => $name) {
      if (in_array($tid, $def_tags)) {
        drupal_set_message($name . ' without Main Category', 'error');
      }
      else {
        $states['#edit-field-tags-und-' . $tid] = ['visible' => ['#edit-field-main-topic-category-und' => ['value' => $no_parent_tid]]];
      }
    }

    $form['field_main_topic_category']['#attached']['library'][] = array('system', 'drupal.states');
    $form['field_main_topic_category']['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array('states' => $states),
    );
  }
}
