<?php

require_once 'search_and_replace.theme.inc';

/**
 * Implements hook_menu().
 */
function search_and_replace_menu() {

  $items['admin/content/search_replace'] = array(
    'title' => 'Search and Replace',
    'description' => 'Find (and replace) keywords in all your content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_and_replace_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('perform search and replace'),
  );
  $items['admin/content/search_replace/search'] = array(
    'title' => 'Search',
    'access arguments' => array('perform search and replace'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['node/%node/search_replace'] = array(
    'title' => 'Search and Replace',
    'description' => 'Find (and replace) keywords in all your content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_and_replace_form', 1),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('perform search and replace'),
  );

  $items['admin/content/search_replace/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_and_replace_settings_form'),
    'access arguments' => array('administer scanner settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

function search_and_replace_theme() {
  return array(
    'search_and_replace_results' => array(
      'variables' => array(
        'results' => NULL,
      ),
    ),
    'search_and_replace_item' => array(
      'variables' => array(
        'item' => NULL,
      ),
    ),
    'search_and_replace_replace_results' => array(
      'variables' => array(
        'results' => NULL,
      ),
    ),
    'search_and_replace_replace_item' => array(
      'variables' => array(
        'item' => NULL,
      ),
    ),
  );
}

function search_and_replace_form($form, &$form_state, $node = array()) {
  if (!empty($node)) {
    $form['#node'] = $node;
  }
  if (!empty($_SESSION['search_and_replace_last_search'])) {
    $form_state['values'] = $_SESSION['search_and_replace_last_search'];
  }

  if (isset($form_state['storage']['confirm'])) {
    return search_and_replace_form_confirm($form, $form_state);
  }

  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Step 1: Search for'),
    '#maxlength' => 256,
  );

  $form['submit_search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  $form['replace'] = array(
    '#type' => 'textfield',
    '#title' => t('Step 2: Replace with'),
    '#description' => 'Replaces search term in below results.',
    '#maxlength' => 256,
  );
  $form['submit_replace'] = array(
    '#type' => 'submit',
    '#value' => t('Replace'),
    '#validate' => array('search_and_replace_form_replace_validate'),
    '#submit' => array('search_and_replace_form_replace_submit'),
  );

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Options'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );


  $languages = array_merge(array('' => 'All languages') + osha_tmgmt_get_translation_languages_options());
  $form['options']['languages'] = array(
    '#type' => 'select',
    '#title' => 'Languages',
    '#options' => $languages,
    '#multiple' => TRUE,
    '#attributes' => array('class' => array('chosen')),
  );

  if (empty($node)) {
    $options = array();
    foreach (field_info_bundles('node') as $bundle_name => $bundle) {
      $options[$bundle_name] = $bundle['label'];
    }
    $form['options']['bundles'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Bundles',
      '#options' => $options,
      '#default_value' => variable_get('search_and_replace_bundles', array()),
    );
  }

  $form['options']['surrounding'] = array(
    '#type' => 'fieldset',
    '#title' => t('Surrounding Text'),
    '#collapsible' => FALSE,
    '#description' => t('You can limit matches by providing the text that should appear immediately before or after the search text. Remember to account for spaces.  Note: Case sensitivity and regular expression options will all apply here, too. Whole word is not recommended.'),
  );

  $form['options']['surrounding']['preceded'] = array(
    '#type' => 'textfield',
    '#title' => t('Preceded by'),
    '#maxlength' => 256,
  );

  $form['options']['surrounding']['followed'] = array(
    '#type' => 'textfield',
    '#title' => t('Followed by'),
    '#maxlength' => 256,
  );

  $form['options']['mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Case sensitive search'),
    '#default_value' => 0,
    '#description' => t("Check this if the search should only return results that exactly match the capitalization of your search terms."),
  );

  $form['options']['wholeword'] = array(
    '#type' => 'checkbox',
    '#title' => t('Match whole word'),
    '#default_value' => 1,
    '#description' => t("Check this if you don't want the search to match any partial words. For instance, if you search for 'run', a whole word search will <em>not</em> match 'running'."),
  );

  $form['options']['regex'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use regular expressions in search'),
    '#default_value' => 0,
    '#description' => t('Check this if you want to use regular expressions in your search terms.'),
  );

  $form['options']['published'] = array(
    '#type' => 'checkbox',
    '#title' => t('Published nodes only'),
    '#default_value' => 1,
    '#description' => t('Check this if you only want your search and replace to affect fields in nodes that are published.'),
  );

  if (!empty($form_state['#results'])) {
    $form['results'] = array(
      '#markup' => theme_search_and_replace_results($form_state['#results']),
    );
  }

  return $form;
}

/**
 * Settings for for module.
 */
function search_and_replace_settings_form($form, &$form_state) {
  $form = array();
  $text_fields = _search_and_replace_get_text_fields();
  $options = drupal_map_assoc(array_keys($text_fields));
  $form['search_and_replace_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Fields to search into',
    '#options' => $options,
    '#default_value' => variable_get('search_and_replace_fields', array()),
  );
  return system_settings_form($form);
}

/**
 * Validate callback for search submit.
 */
function search_and_replace_form_validate($form, &$form_state) {
  if (empty($form_state['values']['search'])) {
    form_set_error('search', t('Please enter some keywords.'));
  }
}

function search_and_replace_form_submit($form, &$form_state) {
  // Store last search bundles.
  $settings = $form_state['values'];
  $_SESSION['search_and_replace_last_search'] = $settings;
  if (empty($form['#node'])) {
    $bundles = array_filter($form_state['values']['bundles']);
    variable_set('search_and_replace_bundles', $bundles);
    $settings['bundles'] = $bundles;
  }
  else {
    $settings['node'] = $form['#node'];
  }
  search_and_replace_perform_search($settings, $form_state);
}

/**
 * Validate callback for replace submit.
 */
function search_and_replace_form_replace_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (!empty($form_state['storage']['confirm'])) {
    $values = $form['#values'];
  }
  if (empty($values['search'])) {
    form_set_error('search', t('Please enter some keywords.'));
  }

  if (empty($values['replace'])) {
    form_set_error('replace', t('Please enter some keywords.'));
  }
}

/**
 * Submit callback for replace submit.
 */
function search_and_replace_form_replace_submit($form, &$form_state) {
  if (!isset($form_state['storage']['confirm'])) {
    $form_state['storage']['confirm'] = TRUE;
    $form_state['rebuild'] = TRUE;
  }
  else {
    $settings = $form['#values'];
    if (empty($form['#node'])) {
      $bundles = array_filter($form_state['values']['bundles']);
      $settings['bundles'] = $bundles;
    }
    else {
      $settings['node'] = $form['#node'];
    }
    $settings['replace_op'] = TRUE;
    search_and_replace_perform_search($settings, $form_state);
  }
}

function search_and_replace_form_confirm($form, &$form_state) {
  $values = $form_state['values'];
  $description = '<p>' . t('You are about to replace "@search" with "@replace"',
    array(
      '@search' => $values['search'],
      '@replace' => $values['replace'],
    ));
  // TODO - add to description other sar settings info from form.
  $form['#values'] = $form_state['values'];
  $form = confirm_form($form, t('Are you sure?'), current_path(), $description);
  $form['actions']['submit']['#submit'] = array('search_and_replace_form_replace_submit');
  $form['actions']['submit']['#validate'] = array('search_and_replace_form_replace_validate');
  return $form;
}

function search_and_replace_perform_search($settings, &$form_state) {
  $flag = NULL;
  if (!$settings['mode']) {
    $flag = 'i';
  }
  $settings['flag'] = $flag;

  $search_exp = search_and_replace_get_search_expression($settings);
  if (!empty($form['#node'])) {
    $settings['nid'] = $form['#node']->nid;
  }
  $search_fields = _search_and_replace_get_set_fields();

  $settings['search_php'] = $search_exp['search_php'];
  $settings['search_db'] = $search_exp['search_db'];

  $search_db = $search_exp['search_db'];
  $results = array();

  foreach ($search_fields as $field_name => $field) {
    $query = search_and_replace_get_search_query($field_name, $search_db, $settings);
    $result = $query->execute();
    while ($row = $result->fetchAssoc()) {
      $row = (object) $row;
      if (!isset($results[$row->nid])) {
        $results[$row->nid] = array(
          'content' => array($field_name => array($row->language => $row->content)),
          'nid' => $row->nid,
          'title' => $row->title,
          'type' => $row->type,
        );
      }
      else {
        $results[$row->nid]['content'][$field_name][$row->language] = $row->content;
      }
    }
  }
  $items = search_and_replace_parse_search_results($results, $settings);
  $form_state['#results'] = $items;
  $form_state['rebuild'] = TRUE;
}

/**
 * Get search words for DB and PHP based on search settings.
 *
 * @param array $settings
 *   Search settings.
 *
 * @return array
 *   search_db - search word to be used in db regex query for any text field.
 *   search_php -
 */
function search_and_replace_get_search_expression(array $settings) {
  $preceded = $settings['preceded'];
  $regex = $settings['regex'];

  // Prepare the prefix and suffix words to be concatenated to search string.
  $preceded_php = '';
  if (!empty($preceded)) {
    if (!$regex) {
      $preceded = addcslashes($preceded, SCANNER_REGEX_CHARS);
    }
    $preceded_php = '(?<=' . $preceded . ')';
  }

  $followed = $settings['followed'];
  $followed_php = '';
  if (!empty($followed)) {
    if (!$regex) {
      $followed = addcslashes($followed, SCANNER_REGEX_CHARS);
    }
    $followed_php = '(?=' . $followed . ')';
  }

  $search = $settings['search'];
  $whole_word = $settings['wholeword'];

  // Prepare search string for different scenarios.
  if ($whole_word && $regex) {
    $search_db = $preceded . "[[:<:]]" . $search . "[[:>:]]" . $followed;
    $search_php = '\b' . $preceded_php . $search . $followed_php . '\b';
  }
  elseif ($whole_word && !$regex) {
    $search_db = "[[:<:]]" . $preceded . addcslashes($search, SCANNER_REGEX_CHARS) . $followed . "[[:>:]]";
    $search_php = '\b' . $preceded_php . addcslashes($search, SCANNER_REGEX_CHARS) . $followed_php . '\b';
  }
  elseif (!$whole_word && $regex) {
    $search_db = $preceded . $search . $followed;
    $search_php = $preceded_php . $search . $followed_php;
  }
  else {
    // !whole word && !regex
    $search_db = $preceded . addcslashes($search, SCANNER_REGEX_CHARS) . $followed;
    $search_php = $preceded_php . addcslashes($search, SCANNER_REGEX_CHARS) . $followed_php;
  }
  // Return search string to be used in db query and php regex.
  return array(
    'search_db' => $search_db,
    'search_php' => $search_php,
  );
}

/**
 * Get a select query for searching in a field.
 *
 * @param string $field_name
 *   name of the field to search into.
 * @param string $search_db
 *   search string for db
 * @param array $settings
 *   Search settings
 *
 * @return \SelectQuery
 */
function search_and_replace_get_search_query($field_name, $search_db, array $settings) {
  $bundles = $settings['bundles'];
  $languages = $settings['languages'];
  $db_field = $field_name . '_value';

  $query = db_select('field_data_' . $field_name, 't');
  $query->fields('n', array('nid', 'title', 'type'));
  $query->join('node', 'n', 't.revision_id = n.vid');
  $query->addField('t', $db_field, 'content');
  $query->addField('t', 'language');
  if (!empty($bundles)) {
    $query->condition('n.type', $bundles, 'IN');
  }
  if (!empty($languages) && current($languages) != '') {
    $query->condition('t.language', $languages, 'IN');
  }
  if ($settings['mode']) {
    $query->condition('t.' . $db_field, $search_db, 'REGEXP BINARY');
  }
  else {
    $query->condition('t.' . $db_field, $search_db, 'REGEXP');
  }
  if ($settings['published']) {
    $query->condition('n.status', '1', '=');
  }
  if (isset($settings['node'])) {
    $query->condition('n.nid', $settings['node']->nid);
  }
  $query->orderBy('n.type');
  $query->orderBy('n.title');

  return $query;
}

/**
 * Batch 'finished' callback for searching.
 */
function search_and_replace_batch_replace_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('saved');
  }
  else {
    drupal_set_message('error');
  }
}

/**
 * Prepare batch results array for theme + adds snippet of each node.
 */
function search_and_replace_parse_search_results($results, $settings) {
  $items = array();
  $search_php = $settings['search_php'];
  $flag = $settings['flag'];
  $regexstr = "/(.{0,130}?)($search_php)(.{0,130})/$flag";

  foreach ($results as $result) {
    $text = array();
    $hits = 0;
    $all_lang = array();
    // Content is grouped per field per language.
    foreach ($result['content'] as $field => $content) {
      $text[$field] = '';
      $item = array(
        'title' => $result['title'],
        'type' => $result['type'],
        'nid' => $result['nid'],
      );

      // If search word found in multiple languages, show just text from one.
      $languages = drupal_map_assoc(array_keys($content));
      $lang = current($languages);
      // If english is available, show english.
      if (!empty($languages['en'])) {
        $lang = 'en';
      }
      $content = $content[$lang];
      $all_lang = array_merge($all_lang, $languages);

      // Extract the snippet.
      $current_hits = preg_match_all($regexstr, $content, $matches, PREG_SET_ORDER);
      if ($current_hits > 0) {
        $hits += $current_hits;
        foreach ($matches as $match) {
          if ($match[1]) {
            $text[$field] .= '...' . htmlentities($match[1], ENT_COMPAT, 'UTF-8');
          }
          $text[$field] .= '<strong>' . htmlentities($match[2], ENT_COMPAT, 'UTF-8') . '</strong>';
          if ($match[3]) {
            $text[$field] .= htmlentities($match[3], ENT_COMPAT, 'UTF-8') . '...';
          }
        }
      }
      else {
        $text[$field] .= "<div>" . t("Can't display search result due to conflict between search term and internal preg_match_all function.") . '</div>';
      }
    }

    $item['count'] = $hits;
    $item['text'] = $text;
    $item['languages'] = $all_lang;
    $items[] = $item;
  }
  return $items;
}

/**
 * Batch operation for searching.
 */
function search_and_replace_batch_operation_replace($nids, $fields, $settings, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = count($nids);
    $context['results']['settings'] = $settings;
    $context['results']['results'] = array();
  }
  $limit = 3;
  $to_process = array_slice($nids, $context['sandbox']['current_node'], $limit);

  $search_php = $settings['search_php'];
  $replace = $settings['replace'];
  $flag = $settings['flag'];
  $regexstr = "/(.{0,130}?)($search_php)(.{0,130})/$flag";

  foreach ($to_process as $nid) {
    $node = node_load($nid);
    foreach ($fields as $field_name) {
      foreach ($node->{$field_name} as $lang => $field_value) {
        $matches = array();
        $content = $field_value['value'];
        $hits = preg_match_all($regexstr, $field_value['value'], $matches, PREG_SET_ORDER);
        $new_content = preg_replace("/$search_php/$flag", $replace, $content, -1, $hits);
        $node->{$field_name}[$lang] = $new_content;
      }
    }
    node_save($node);
    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node']++;
    $context['message'] = t('Now processing %node', array('%node' => $node->title));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Get all the info fields selected in module's settings form.
 */
function _search_and_replace_get_set_fields() {
  $setting = variable_get('search_and_replace_fields', array());
  $set_fields = array();
  if (!empty($setting)) {
    $fields = _search_and_replace_get_text_fields();
    foreach ($setting as $field_name) {
      $set_fields[$field_name] = $fields[$field_name];
    }
  }
  return $set_fields;
}

/**
 * Get all info fields of type text and text with summary.
 */
function _search_and_replace_get_text_fields() {
  $fields = field_info_fields();
  $text_fields = array();
  foreach ($fields as $field_name => $field) {
    $is_text = $field['type'] == 'text' || $field['type'] == 'text_with_summary';
    $is_for_nodes = !empty($field['bundles']['node']);
    if ($is_for_nodes && $is_text) {
      $text_fields[$field_name] = $field;
    }
  }
  return $text_fields;
}

