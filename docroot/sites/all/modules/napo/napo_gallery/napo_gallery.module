<?php
/**
 * @file
 * Code for the Napo Gallery feature.
 */

include_once 'napo_gallery.features.inc';

/**
 * Implements hook_form_alter().
 */
function napo_gallery_form_napo_album_node_form_alter(&$form, &$form_state, $form_id) {
  // Limit the title field of the album to 50 chars.
  $lang = element_children($form['title_field'])[0];
  $form['title_field'][$lang][0]['value']['#maxlength'] = 50;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function napo_gallery_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add display_field setting to field because file_field_widget_form() assumes it is set.
  // show Title for image fields rendered as media
  if (!empty($element['#field_name']) && $element['#field_name'] == 'field_images') {
    if ($context['field']['type'] == 'image' && $context['instance']['widget']['module'] == 'media' && $context['instance']['settings']['title_field'] ) {
      // add back the Title when widget is media
      foreach (element_children($element) as $delta) {
        $element[$delta]['#process'][] = 'napo_gallery_widget_process';
      }
    }
  }
}

/**
 * An element #process callback for the image field type.
 *
 * Expands the image type to include the title field.
 */
function napo_gallery_widget_process($element, &$form_state, $form) {
  $item = $element['#value'];

  // Add the additional alt and title fields.
  $instance = field_widget_instance($element, $form_state);
  unset($element['edit']);
  $element['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($item['title']) ? $item['title'] : '',
    '#access' => (bool) $item['fid'],
    '#maxlength' => 1024,
  );

  return $element;
}

/**
 * Implements hook_node_view().
 */
function napo_gallery_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'napo_album' && $view_mode == 'full') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $first_image = $wrapper->field_images->value()[0];
    if (!empty($first_image)) {
      $image_vars = array(
        'style_name' => 'napo_cover',
        'path' => $first_image['uri'],
        'alt' => $node->title,
      );
      $link = '<a href="javascript:void(0);" onclick="console.log(jQuery(\'.field-name-field-images a.colorbox-inline\')); jQuery(\'.field-name-field-images a.colorbox-inline\').eq(0).trigger(\'click\');">' . theme('image_style', $image_vars) . '</a>';
      $node->content['gallery_cover_image'] = array('#markup' => $link);
      if (!empty($node->content['field_images'])) {
        $image_deltas = element_children($node->content['field_images']);
        $total = count($image_deltas);
        $per_page = 6;
        if ($total > $per_page) {
          $page = pager_default_initialize($total, $per_page);
          if ($page > 0) {
            hide($node->content['body']);
            hide($node->content['gallery_cover_image']);
          }
          $offset = $per_page * $page;
          $showing_deltas = range($offset, $offset + $per_page - 1);
          $remove_deltas = array_diff($image_deltas, $showing_deltas);
          foreach ($remove_deltas as $delta) {
            unset($node->content['field_images'][$delta]);
          }
          $node->content['field_images']['#suffix'] = theme('pager');
        }
      }
    }
  }
}

/**
 * Implements hook_galleryformatter_styles().
 *
 * @see galleryformatter_gallery_galleryformatter_styles
 */
function napo_gallery_galleryformatter_styles() {
  $gallerystyles_directory = drupal_get_path('theme', 'napo_frontend') . '/gallerystyles';
  $files = file_scan_directory($gallerystyles_directory, '/\.css$/');
  $gallerystyles = array();
  foreach ($files as $file) {
    // Skip RTL files.
    if (!strpos($file->name, '-rtl')) {
      $gallerystyles[$file->uri] = drupal_ucfirst($file->name);
    }
  }
  return $gallerystyles;
}
