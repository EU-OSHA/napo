<?php
/**
 * @file
 * Code for the Napo Common feature.
 */

include_once 'napo_common.features.inc';
include_once 'napo_common.views.inc';

/**
 * Implements hook_menu().
 */
function napo_common_menu() {
  $items = array();
  $items['node/%node/download_video'] = array(
    'title' => 'Download video',
    'page callback' => 'napo_common_download_video_callback',
    'page arguments' => array(1),
    'access callback' => 'napo_common_download_video_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => 4,
  );
  return $items;
}

/**
 * Menu callback for "Download video" tab.
 */
function napo_common_download_video_callback($node) {
  napo_common_download_video($node);
}

/**
 * Access callback for "Download video" tab.
 */
function napo_common_download_video_access($node) {
  if (!empty($node) && isset($node->field_video)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $files = $wrapper->field_video->value();
    if (!empty($files)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Alter the node form to add other redirects (i.e node/%node/download).
 */
function napo_common_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['redirect'])) {
    $node = $form['#node'];
    $redirects = redirect_load_multiple(array(), array('redirect' => 'node/' . $node->nid . '/download'));
    $header = array('source', 'status_code', 'language', 'count', 'access', 'operations', 'redirect');
    $list = redirect_list_table($redirects, $header);
    $form['redirect']['napo-list'] = $list['list'];
  }
}


/**
 * Downloads video file from field_video of a node.
 */
function napo_common_download_video($node) {
  if (!empty($node) && isset($node->field_video)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $files = $wrapper->field_video->value();
    if (!empty($files)) {
      $file = array();
      // Try finding mp4 format.
      foreach ($files as $video) {
        if ($video['filemime'] == 'video/mp4') {
          $file = $video;
          break;
        }
      }
      if (empty($files)) {
        $file = current($file);
      }
      $headers = array(
        'Content-Type'              => $file['filemime'],
        'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file['uri']) . '"',
        'Content-Length'            => $file['filesize'],
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file['uri'], $headers);
    }
  }
  drupal_set_message(t("There was an error downloading the lesson's video!"), 'error');
  drupal_not_found();
}

/**
 * Implments hook_form_FORM_ID_alter().
 */
function napo_common_form_chosen_admin_settings_alter(&$form, $form_state) {
  // Add options to chosen 30.
  $form['chosen_minimum_single']['#options']['30'] = '30';
  $form['chosen_minimum_multiple']['#options']['30'] = '30';
}

/**
 * Implements hook_node_submit().
 */
function napo_common_node_submit($node, $form, &$form_state) {
  // Add default alias for translations as the english alias (if one exists).
  $entity_trans_form = !empty($form_state['entity_translation']);
  if ($entity_trans_form && $form_state['entity_translation']['is_translation'] === TRUE
    && empty($form_state['values']['path']['alias'])) {
    $path = path_load(array('source' => 'node/' . $node->nid, 'language' => 'en'));
    if (!empty($path)) {
      $node->path['alias'] = $path['alias'];
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * Handle the case when the current language does
 * not match content node language.
 */
function napo_common_node_view($node, $view_mode, $langcode) {
  global $language;

  // Node Moderation State is not Published
  if (workbench_moderation_node_type_moderated($node->type) &&
    (!isset($node->workbench_moderation['published']) || $node->workbench_moderation['published']->current != 1)) {
    return;
  }

  $redirectId = variable_get('no_translation_nid', '248');
  $exceptions = explode(PHP_EOL, variable_get('no_translation_exceptions'));
  $exceptions_types = explode(PHP_EOL, variable_get('no_translation_type_exceptions'));

  array_walk($exceptions, function(&$value, $index) {
    $value = trim($value);
  });

  array_walk($exceptions_types, function(&$value, $index){
    $value = trim($value);
  });

  $no_exception = (!in_array($node->nid, $exceptions) && !in_array($node->type, $exceptions_types));

  if ($view_mode == 'full' && $no_exception && !isset($_GET['orig_lng'])) {
    // If current language does not match content node language.
    if (!empty($node->language) && $node->language != $language->language && $node->nid != $redirectId) {
      // Lookup translations for current node
      if(!napo_common_has_translation($node->nid, $language)) {
        // Redirect to a static page if there's not a translation
        // in the currently active language.
        $nodeLanguage = $language->language;
        if (!napo_common_has_translation($redirectId, $language)) {
          // Uncomment after static page (No translation available) translation
          //$nodeLanguage = 'en';
        }
        // Redirect to no translation available page.
        drupal_goto(drupal_get_path_alias('node/'.$redirectId, $nodeLanguage),
          array(
            'query' => array('destination' => 'node/'.$node->nid),
            'language' => (object)array('language' => $nodeLanguage),
            'prefix' => $nodeLanguage.'/',
          )
        );
      }
    }
  }

  // Hide node title for redirect node page.
  if ($node->nid == $redirectId) {
    hide($node->content['title_field']);
  }

//  $full_mode_views = array('full', 'episode_full');
//  if (!in_array($view_mode, $full_mode_views)) {
//    if (!empty($node->field_archived[LANGUAGE_NONE][0]['value'])) {
//      if (!empty($node->content['title_field'][0]['#markup'])) {
//        $node->content['title_field'][0]['#markup'] .= '<span class="title-archived">' . t('Archived') . '</span>';
//      }
//    }
//  }
}

/**
 * Implements hook_field_language_alter().
 * Performs language fallback for requests that have orig_lng as parameter
 */
function napo_common_field_language_alter(&$display_language, $context) {
  $entity = $context['entity'];
  $entity_type = $context['entity_type'];
  $fallback_language = 'en';
  if(isset($_GET['orig_lng'], $entity->nid) && $entity->nid == arg(1) && $entity_type == 'node') {
    if(preg_match('/[a-z]{2}/', $_GET['orig_lng'])) {
      $fallback_language = $_GET['orig_lng'];
    }
    locale_field_language_fallback($display_language, $entity, $fallback_language);
  }
}

/**
 * Check if a node has translation for a specified language
 */
function napo_common_has_translation($nid, $language) {
  $hasTranslation = FALSE;
  $node = node_load($nid);
  if(!$node) {
    return FALSE;
  }
  $translations = $node->translations->data;

  if(isset($translations[$language->language])) {
    $hasTranslation = TRUE;
  }
  return $hasTranslation;
}

/**
 * Implements hook_block_info().
 */
function napo_common_block_info() {
  $blocks = array();
  $blocks['no_translation'] = array(
    'info' => t('Translation not available'),
  );
  $blocks['page_not_found'] = array(
    'info' => t('Page not found'),
  );

  $blocks['napo_print_friendly'] = array(
    'info' => t('Print friendly'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'region' => 'header_top_bar',
  );

  $blocks['osha_archived_content'] = array(
    'info' => t('Node archived info block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

function napo_common_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['text_resize'][0]['cache'] = DRUPAL_NO_CACHE;
}

/**
 * Implements hook_block_configure().
 */
function napo_common_block_configure($delta = '') {
  $form = array();

  switch($delta) {
    case 'no_translation':
      // No translation node Id
      $form['no_translation_nid'] = array(
        '#type' => 'textfield',
        '#title' => 'No translation page nid',
        '#default_value' => variable_get('no_translation_nid', '248'),
      );

      $form['no_translation_text'] = array(
        '#type' => 'textarea',
        '#title' => 'Page content',
        '#description' => "Content of the no translation available page",
        '#default_value' => variable_get('no_translation_text', 'OOPS!<br />Translation not available.<br />What do you want to do next?'),
      );
      $form['no_translation_exceptions'] = array(
        '#type' => 'textarea',
        '#title' => 'Exceptions - node IDs',
        '#description' => "IDs for which the rule doesn't apply. Enter one node ID per line.",
        '#default_value' => variable_get('no_translation_exceptions'),
      );
      $form['no_translation_type_exceptions'] = array(
        '#type' => 'textarea',
        '#title' => 'Exceptions - content types',
        '#description' => "Content types for which the rule doesn't apply. Enter one content type per line.",
        '#default_value' => variable_get('no_translation_type_exceptions'),
      );
      break;

    case 'page_not_found':
      // Page not found text.
      $form['page_not_found_text'] = array(
        '#type' => 'textfield',
        '#title' => 'Page not found text',
        '#default_value' => variable_get('page_not_found_text',
          "OOPS!<br />Sorry, we can't find what<br />you are looking for"),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function napo_common_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'no_translation':
      // Saving static page nid.
      variable_set('no_translation_nid', $edit['no_translation_nid']);
      // Saving content
      variable_set('no_translation_text', $edit['no_translation_text']);
      // Saving exceptions
      variable_set('no_translation_exceptions', $edit['no_translation_exceptions']);
      // Saving content types exceptions
      variable_set('no_translation_type_exceptions', $edit['no_translation_type_exceptions']);
      break;

    case 'page_not_found':
      // Saving page not found text.
      variable_set('page_not_found_text', $edit['page_not_found_text']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function napo_common_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'no_translation' :
      $block['content'] = drupal_get_form('napo_common_no_translation_form');
      break;

    case 'page_not_found' :
      $block['content'] = napo_common_page_not_found_content();
      break;

    case 'napo_print_friendly':
      $block['subject'] = "<none>";
      $block['content'] = theme('napo_print_friendly_block');
      break;

    case 'osha_archived_content':
      $block['subject'] = t('NAPO archived content');
      $block['content'] = napo_common_archived_content_block_view();
      break;
  }

  return $block;
}

/**
 * Implements hook_node_access().
 */
function napo_common_node_access($node, $op, $account) {
  // Deny access for content with future published date.
  if ($op == 'view' && !user_access('view all unpublished content')) {
    if (!empty($node->field_publication_date)) {
      $wrapper = entity_metadata_wrapper('node', $node);
      $publication_date = $wrapper->field_publication_date->value();
      if ($publication_date > time()) {
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

function napo_common_no_translation_form($form, &$form_state) {
  global $base_url, $language;
  $form = $available = array();
  if (empty($_REQUEST['destination'])) {
    return;
  }
  $nid = str_replace('node/', '', $_REQUEST['destination']);
  if (!$node = node_load($nid)) {
    return;
  }

  // Get node translations.
  $translations = array_keys($node->translations->data);
  sort($translations);
  // Get installed languages.
  $installed = language_list();

  // Set an array with available translations and languages names.
  foreach ($translations as $lng) {
    if (isset($installed[$lng])) {
      $available[$lng] = $installed[$lng]->native;
    }
  }

  $form['page_content'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="no_translation_page_content">'.
      t(variable_get('no_translation_text', 'OOPS!<br />Translation not available.<br />What do you want to do next?'))
      .'</div>',
  );

  // Available translations
  $form['available_languages'] = array(
    '#type' => 'select',
    '#title' => t('See this page in other language'),
    '#empty_option' => t('Select translation'),
    '#options' => $available,
    '#attributes' => array(
      'class' => array('lang-dropdown-select-element'),
    ),
  );

  $form['link_to_home'] = array(
    '#type' => 'markup',
    '#markup' =>
      "<div class = 'page_not_found_front'>".
      "<label>".t('Try this instead')."</label>".
      l(t('back to home'), '<front>').
      "</div>",
  );

  // Redirect node translations.
  foreach ($available as $lngCode => $lngValue) {
    $form[$lngCode] = array(
      '#type' => 'hidden',
      '#default_value' => '/'.$language->language.'/'.drupal_get_path_alias('node/'.$nid).'?orig_lng='.$lngCode,
    );
  }

  // URL of the page that has no translation
  $form['no_translation_request'] = array(
    '#type' => 'hidden',
    '#default_value' => $base_url.'/en/'.drupal_get_path_alias('node/'.$nid),
  );

  // Send mail button
  /*
  $form['no_translation_mail'] = array(
    '#type' => 'submit',
    '#prefix' => t('Help us: Tell us this page is not available in your language '),
    '#value' => 'Send',
  );
  */
  return $form;
}


/**
 * Form submit handler
 */
/*
function napo_common_no_translation_form_submit($form, &$form_state) {
  $site_email = variable_get('site_mail', ini_get('sendmail_from'));

  drupal_mail('napo_common', 'no_translation', $site_email, language_default(), $form_state);
  drupal_set_message(t('The mail has been submitted. Thank you!'));
  //redirect to home page
  drupal_goto('<front>');
}
*/

/**
 * Implements hook_webform_select_options_info().
 *
 * See webform/webform.api.php for further information on
 * this hook in the Webform API.
 */
function napo_common_webform_select_options_info() {
  $items = array();
  $items['available_languages'] = array(
    'title' => t('Languages'),
    'options callback' => 'napo_common_webform_pre_build_list_languages',
  );

  return $items;
}

/**
 * Build an options list (available languages)
 * to be used with webforms select list.
 */
function napo_common_webform_pre_build_list_languages() {
  $available_languages = array();
  $languages = osha_language_list(TRUE);
  foreach($languages as $key => $language) {
    $available_languages[$key] = $language->native;
  }

  return $available_languages;
}

/**
 * Page not found content.
 */
function napo_common_page_not_found_content() {
  // Intro text.
  $content = "<div class = 'page_not_found_intro'>";
  $content .= t(variable_get('page_not_found_text', "OOPS!<br />Sorry, we can't find what<br />you are looking for"));
  $content .= '</div>';

  // Search block.
  $content .= "<div class = 'page_not_found_search'>";
  $search_block = module_invoke('search', 'block_view');
  $content .= '<div>' . t('Try one of these instead:') . '</div>';
  $content .= render($search_block);
  $content .= '</div>';

  // Frontpage link.
  $content .= "<div class = 'page_not_found_front'>";
  $content .= l(t('back to home'), '<front>');
  $content .= '</div>';

  return $content;
}

/**
 * Implements hook_theme().
 */
function napo_common_theme() {
  return array(
    'napo_print_friendly_block' => array(),

    'napo_common_archived_content' => array(
      'variables' => array(),
      'template' => 'theme/napo_common_archived_content'
    ),
  );
}

/**
 * Callback for archived content block view.
 */
function napo_common_archived_content_block_view() {
  $node = menu_get_object();
  if (!empty($node) && napo_common_node_is_archived($node)) {
    return theme('napo_common_archived_content', array());
  }
  return '';
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function napo_common_field_formatter_info_alter(&$info) {
  // Alter the title_linked formatter by assing this module to it.
  $info['title_linked']['module'] = 'napo_common';
  // Add custom settings default.
  $info['title_linked']['settings']['title_archived_label'] = FALSE;
  $info['title_linked']['settings']['napo_common_title_prefix'] = '';
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Alter the settings form of title_linked formatter.
 */
function napo_common_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $form = title_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  $settings = $instance['display'][$view_mode]['settings'];
  $form['napo_common_title_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('A prefix appended to the title'),
    '#default_value' => $settings['napo_common_title_prefix'],
  );
  $form['title_archived_label'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include archived label'),
    '#default_value' => $settings['title_archived_label'],
  );

  // Let other napo modules to interact with this form.
  drupal_alter('napo_common_field_formatter_settings_form', $field, $instance, $view_mode, $form, $form_state);
  return $form;
}

function napo_common_field_formatter_settings_summary($field, $instance, $view_mode) {
  return title_field_formatter_settings_summary($field, $instance, $view_mode);
}

/**
 * Implements hook_field_formatter_view().
 */
function napo_common_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // If is film/episode, use custom formatter.
  if ($entity_type == 'node' && $entity->type == 'napo_video') {
    $element = napo_film_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  else {
    $element = title_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  $settings = $display['settings'];
  if (!empty($settings['title_archived_label']) && napo_common_node_is_archived($entity)) {
    $element[0]['#markup'] .= '<span class="title-archived"> ' . t('Archived') . '</span>';
  }

  if (!empty($settings['napo_common_title_prefix'])) {
    $element[0]['#markup'] = '<span class="napo_common_title_prefix">' . t($settings['napo_common_title_prefix']) . '</span>' . $element[0]['#markup'];
  }

  return $element;
}

/**
 * If node is mark as outdated or not.
 */
function napo_common_node_is_archived($node) {
  if (isset($node->field_archived[LANGUAGE_NONE][0]['value']) &&
    $node->field_archived[LANGUAGE_NONE][0]['value'] == 1) {
    return TRUE;
  }
  return FALSE;
}

// Create a theme function that can be overridden by other theme developers.
function theme_napo_print_friendly_block() {
  // Add js and css
  $content = array(
    '#attached' => array(
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'napo_common') . '/js/napo_print_friendly.js',
          'type' => 'file',
        )
      ),
    ),
  );

  $content['#markup'] = t('Print friendly:');
  $content['#markup'] .= '&nbsp;<a href="javascript:if(window.print)window.print();"><span class="glyphicon glyphicon-print"></span></a>';

  return render($content);
}

/**
 * Get users by role
 */
function napo_common_get_users_by_role ($role_name){
  $role = user_role_load_by_name($role_name);
  $uids = db_select('users_roles', 'ur')
    ->fields('ur', array('uid'))
    ->condition('ur.rid', $role->rid, '=')
    ->execute()
    ->fetchCol();
  $users = user_load_multiple($uids);

  return $users;
}

/**
 * Implements hook_preprocess_node().
 */
function napo_common_preprocess_node(&$vars) {
  $node = $vars['node'];
  // Add share widget ds field.
  if (!empty($vars['preprocess_fields'])) {
    if (in_array('share_widget', $vars['preprocess_fields'])) {
      $vars['share_widget'] = napo_common_get_share_widget($node);
    }
  }
}

function napo_common_get_share_widget($node) {
  global $language;
  // Add services javascript.
  drupal_add_js(drupal_get_path('module', 'napo_common') . '/js/share_widget.js');
  // Add facebook app key.
  $fb_app_key = variable_get('fb_app_key', '');
  drupal_add_js(array('napo_common' => array('fb_app_key' => $fb_app_key)), 'setting');

  $url = url('/node/' . $node->nid, array('absolute' => TRUE));
  $title = field_get_items('node', $node, 'title_field');
  $title = current($title)['value'];
  $site_name = variable_get('site_name', '');
  // Construct the tweet.
  $twitter_text = $title . ' | ' . $site_name;
  $tweet_url = url('https://twitter.com/intent/tweet', array(
    'query' => array(
      'original_referer' => $url,
      'text' => $twitter_text,
      'url' => shorten_url($url),
    ),
  ));
  $vars = array(
    'url' => $url,
    'tweet_url' => $tweet_url,
    'node' => $node,
    'language' => $language,
  );
  return theme('napo_film_share_widget', $vars);
}
