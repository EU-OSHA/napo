<?php

/**
 * Implments hook_form_FORM_ID_alter().
 */
function napo_common_form_chosen_admin_settings_alter(&$form, $form_state) {
  // Add options to chosen 30.
  $form['chosen_minimum_single']['#options']['30'] = '30';
  $form['chosen_minimum_multiple']['#options']['30'] = '30';
}

/**
 * Implements hook_node_submit().
 */
function napo_common_node_submit($node, $form, &$form_state) {
  // Add default alias for translations as the english alias (if one exists).
  $entity_trans_form = !empty($form_state['entity_translation']);
  if ($entity_trans_form && $form_state['entity_translation']['is_translation'] === TRUE
    && empty($form_state['values']['path']['alias'])) {
    $path = path_load(array('source' => 'node/' . $node->nid, 'language' => 'en'));
    if (!empty($path)) {
      $node->path['alias'] = $path['alias'];
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * Handle the case when the current language does
 * not match content node language.
 */
function napo_common_node_view($node, $view_mode, $langcode) {
  global $language;

  $redirectId = variable_get('no_translation_nid', '242');

  if ($view_mode == 'full') {
    // If current language does not match content node language.
    if (!empty($node->language) && $node->language != $language->language && $node->nid != $redirectId) {
      // Lookup translations for current node
      if(!napo_common_has_translation($node->nid, $language)) {
        // Redirect to a static page if there's not a translation
        // in the currently active language.
        $nodeLanguage = $language->language;
        if (!napo_common_has_translation($redirectId, $language)) {
          $nodeLanguage = 'en';
        }
        // Redirect to no translation available page.
        drupal_goto(drupal_get_path_alias('node/'.$redirectId, $nodeLanguage),
          array(
            'query' => array('destination' => 'node/'.$node->nid),
            'language' => (object)array('language' => $nodeLanguage),
            'prefix' => $nodeLanguage.'/',
          )
        );
      }
    }
  }
}

/**
 * Check if a node has translation for a specified language
 */
function napo_common_has_translation($nid, $language) {
  $hasTranslation = FALSE;
  $node = node_load($nid);
  if(!$node) {
    return FALSE;
  }
  $translations = $node->translations->data;

  if(isset($translations[$language->language])) {
    $hasTranslation = TRUE;
  }
  return $hasTranslation;
}

/**
 * Implements hook_block_info().
 */
function napo_common_block_info() {
  $blocks = array();
  $blocks['no_translation'] = array(
    'info' => t('Translation not available'),
  );
  $blocks['page_not_found'] = array(
    'info' => t('Page not found'),
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function napo_common_block_configure($delta = '') {
  $form = array();

  switch($delta) {
    case 'no_translation':
      // No translation node Id
      $form['no_translation_nid'] = array(
        '#type' => 'textfield',
        '#title' => t('No translation page nid'),
        '#default_value' => variable_get('no_translation_nid', '242'),
      );
      break;

    case 'page_not_found':
      // Page not found text.
      $form['page_not_found_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Page not found text'),
        '#default_value' => variable_get('page_not_found_text',
          t("OOPS!<br />Sorry, we can't find what<br />you are looking for")),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function napo_common_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'no_translation':
      // Saving static page nid.
      variable_set('no_translation_nid', $edit['no_translation_nid']);
      break;

    case 'page_not_found':
      // Saving page not found text.
      variable_set('page_not_found_text', $edit['page_not_found_text']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function napo_common_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'no_translation' :
      $block['content'] = drupal_get_form('napo_common_no_translation_form');
      break;

    case 'page_not_found' :
      $block['content'] = napo_common_page_not_found_content();
      break;
  }

  return $block;
}

function napo_common_no_translation_form($form, &$form_state) {
  global $base_url;
  $form = $available = array();
  if (empty($_REQUEST['destination'])) {
    return;
  }
  $nid = str_replace('node/', '', $_REQUEST['destination']);
  if (!$node = node_load($nid)) {
    return;
  }

  // Get node translations.
  $translations = array_keys($node->translations->data);
  sort($translations);
  // Get installed languages.
  $installed = language_list();

  // Set an array with available translations and languages names.
  foreach ($translations as $lng) {
    if (isset($installed[$lng])) {
      $available[$lng] = $installed[$lng]->native;
    }
  }

  // Available translations
  $form['available_languages'] = array(
    '#type' => 'select',
    '#title' => t('See this page in other language'),
    '#empty_option' => t('Select translation'),
    '#options' => $available,
    '#attributes' => array(
      'class' => array('lang-dropdown-select-element'),
    ),
  );

  // Redirect node translations.
  foreach ($available as $lngCode => $lngValue) {
    $form[$lngCode] = array(
      '#type' => 'hidden',
      '#default_value' => '/' . $lngCode . '/' . drupal_get_path_alias('node/' . $nid),
    );
  }

  // URL of the page that has no translation
  $form['no_translation_request'] = array(
    '#type' => 'hidden',
    '#default_value' => $base_url . '/en/' . drupal_get_path_alias('node/'.$nid),
  );

  // Send mail button
  /*
  $form['no_translation_mail'] = array(
    '#type' => 'submit',
    '#prefix' => t('Help us: Tell us this page is not available in your language '),
    '#value' => 'Send',
  );
  */
  return $form;
}


/**
 * Form submit handler
 */
/*
function napo_common_no_translation_form_submit($form, &$form_state) {
  $site_email = variable_get('site_mail', ini_get('sendmail_from'));

  drupal_mail('napo_common', 'no_translation', $site_email, language_default(), $form_state);
  drupal_set_message(t('The mail has been submitted. Thank you!'));
  //redirect to home page
  drupal_goto('<front>');
}
*/

function napo_common_mail($key, &$message, $params) {
  switch($key) {
    case 'no_translation':
      $message['subject'] = t('No translation report');
      $message['body'][] = 'The following page does not have all the translations created: '.$params['values']['no_translation_request'];
      break;
  }
}

/**
 * Implements hook_webform_select_options_info().
 *
 * See webform/webform.api.php for further information on
 * this hook in the Webform API.
 */
function napo_common_webform_select_options_info() {
  $items = array();
  $items['available_languages'] = array(
    'title' => t('Languages'),
    'options callback' => 'napo_common_webform_pre_build_list_languages',
  );

  return $items;
}

/**
 * Build an options list (available languages)
 * to be used with webforms select list.
 */
function napo_common_webform_pre_build_list_languages() {
  $available_languages = array();
  $languages = osha_language_list(TRUE);
  foreach($languages as $key => $language) {
    $available_languages[$key] = $language->native;
  }

  return $available_languages;
}

/**
 * Page not found content
 */
function napo_common_page_not_found_content() {
  // Intro text
  $content = "<div class = 'page_not_fount_intro'>";
  $content .= variable_get('page_not_found_text');
  $content .= '</div>';

  // Search block
  $content .= "<div class = 'page_not_fount_search'>";
  $search_block = module_invoke('search', 'block_view');
  $content .= '<div>' . t('Try one of there instead:') . '</div>';
  $content .= render($search_block);
  $content .= '</div>';

  // Frontpage link
  $content .= "<div class = 'page_not_fount_front'>";
  $content .= t('back to home');
  $content .= '</div>';

  return $content;
}
