<?php
/**
 * @file
 * Code for the Napo Common feature.
 */

define('NAPO_TEACHERS_URL', variable_get('napo_teachers_url', '/learning-with-napo/napo-for-teachers'));
define('NAPO_WORKPLACES_URL', variable_get('napo_workplaces_url', '/learning-with-napo/napo-in-the-workplace'));

// using-napo/napo-workplaces => learning-with-napo/napo-in-the-workplace
// using-napo/napo-for-teachers => learning-with-napo/napo-for-teachers

include_once 'napo_common.features.inc';
include_once 'napo_common.views.inc';

function napo_common_lesson_pdf_access($node) {
  if (user_access('edit any lesson_toolkit content') && $node->type == 'lesson') {
    return TRUE;
  }
  return FALSE;
}

function napo_common_activity_pdf_access($node) {
  if (user_access('edit any lesson_toolkit content') && $node->type == 'msds_activities') {
    return TRUE;
  }
  return FALSE;
}

function napo_common_download_zip_access($node) {
  if (($node->type == 'msds_activities') || ($node->type =='lesson')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_admin_paths().
 */
function napo_common_admin_paths() {
  $paths = array(
    'node/*/lesson_pdf' => TRUE,
    'node/*/activity_pdf' => TRUE,
  );
  return $paths;
}

function _napo_common_lesson_pdf_name($node, $language) {
  $map = [
    20 => 'Napo-lesson-Danger-Prohibition-signs',
    21 => 'Napo-lesson-Mandatory-Rescue-signs',
    29 => 'Napo-lesson-Be-body-wise-Skin',
    30 => 'Napo-lesson-Be-body-wise-Back',
    84 => 'Napo-lesson-Identification-risks-hazards',
    85 => 'Napo-lesson-hazards-Intervention-prevention',

    347 => 'Napo-in-the-workplace-activity-Check-your-posture',
    348 => 'Napo-in-the-workplace-activity-Keep-moving-at-work',
    349 => 'Napo-in-the-workplace-activity-Share-skills-and-experience',
    350 => 'Napo-in-the-workplace-activity-Risk-assess-repetitive-work',
    351 => 'Napo-in-the-workplace-activity-Split-up-heavy-loads',
    352 => 'Napo-in-the-workplace-activity-Report-signs-MSDs-early',
    353 => 'Napo-in-the-workplace-activity-Dont-twist-prevent-MSDs',
    354 => 'Napo-in-the-workplace-activity-Dont-forget-handling-aids',
    355 => 'Napo-in-the-workplace-activity-Customise-your-workstation',
    356 => 'Napo-in-the-workplace-activity-Prevent-hand-arm-vibration',
    357 => 'Napo-in-the-workplace-activity-Let-machine-take-strain',
    358 => 'Napo-in-the-workplace-activity-Take-a-break',
    359 => 'Napo-in-the-workplace-activity-Lift-and-carry-safely',
    431 => 'Napo-in-the-workplace-activity-Know-early-signs-of-MSDs',
  ];
  $filename = $language . '_'  . $node->nid . '.pdf';
  if (!empty($map[$node->nid])) {
    $filename = $map[$node->nid] . '-' . $language . '.pdf';
  }
  return 'public://' . 'lessons/' . $filename;
}

/**
 * Gennerate a PDF for a given Drupal path.
 *
 * @param string $path
 *   path of the page to convert to PDF.
 * @param array $query
 *   (Optional) array of key/value pairs as used in the url() function for the
 *   query.
 * @param int $cid
 *   (Optional) comment ID of the comment to render.
 * @param string $pdf_filename
 *   (Optional) filename of the generated PDF.
 * @param string $view_mode
 *   (Optional) view mode to be used when rendering the content.
 *
 * @return string|null
 *   generated PDF page, or NULL in case of error
 *
 * @see print_pdf_controller()
 */
function osha_print_pdf_generate_path($path, $query = NULL, $cid = NULL, $pdf_filename = NULL, $view_mode = PRINT_VIEW_MODE) {
  global $base_url;

  $link = print_pdf_print_link();
  $node = print_controller($path, $link['format'], $cid, $view_mode);
  if ($node) {
    // Call the tool's hook_pdf_tool_info(), to see if CSS must be expanded.
    $pdf_tool = explode('|', variable_get('print_pdf_pdf_tool', PRINT_PDF_PDF_TOOL_DEFAULT));
    $cache_enabled = variable_get('print_pdf_cache_enabled', PRINT_PDF_CACHE_ENABLED_DEFAULT);

    $function = $pdf_tool[0] . '_pdf_tool_info';
    $info = function_exists($function) ? $function() : array();
    $expand = isset($info['expand_css']) ? $info['expand_css'] : FALSE;
    $html = theme('print', array(
      'node' => $node,
      'query' => $query,
      'expand_css' => $expand,
      'format' => $link['format'],
    ));
    // Img elements must be set to absolute.
    $pattern = '!<(img\s[^>]*?)>!is';
    $html = preg_replace_callback($pattern, '_print_rewrite_urls', $html);

    // Convert the a href elements, to make sure no relative links remain.
    $pattern = '!<(a\s[^>]*?)>!is';
    $html = preg_replace_callback($pattern, '_print_rewrite_urls', $html);
    // And make anchor links relative again, to permit in-PDF navigation.
    $html = preg_replace("!${base_url}/" . $link['path'] . '/.*?#!', '#', $html);

    $meta = array(
      'node' => $node,
      'url' => url(drupal_get_path_alias(empty($node->nid) ? $node->path : "node/$node->nid"), array('absolute' => TRUE)),
    );
    if (isset($node->name)) {
      $meta['name'] = $node->name;
    }
    if (isset($node->title)) {
      $meta['title'] = $node->title;
    }

    $paper_size = isset($node->print_pdf_size) ? $node->print_pdf_size : NULL;
    $page_orientation = isset($node->print_pdf_orientation) ? $node->print_pdf_orientation : NULL;

    return print_pdf_generate_html($html, $meta, NULL, $paper_size, $page_orientation);
  }
  return NULL;
}

/**
 * Form for downloading a field_video file in available formats.
 */
function napo_common_lesson_pdf_page($node) {
  global $language;
  if ($action = arg(3)) {
    $options = [
      'language' => $language->language,
      'absolute' => TRUE,
    ];
    if ($action == 'pdf') {
      $path  = url($language->language . '/node/' . $node->nid . '/generate_pdf/' . $language->language, $options);
      file_get_contents($path);
      if ($node->type == 'lesson') {
        $path  = url($language->language . '/node/' . $node->nid . '/lesson_pdf/', $options);
      }
      else {
        $path  = url($language->language . '/node/' . $node->nid . '/activity_pdf/', $options);
      }
      drupal_set_message(t($node->title . ' pdf has been generated.'));
      drupal_goto($path, $options);
    }
    else {
      $dest = _napo_common_lesson_pdf_name($node, $language->language);
      module_load_include('inc', 'print_pdf', 'print_pdf.pages');
      $pdf = osha_print_pdf_generate_path($node->nid, [], NULL, NULL);
      $file_temp = file_save_data($pdf, $dest, FILE_EXISTS_REPLACE);
      $file_temp->description = str_replace('.pdf', '', $file_temp->filename);

      $node = node_load($node->nid);
      if (!empty($file_temp)) {
        $file_temp->status = 1;
        $file_temp->display = 1;
        if ($node->type == 'lesson') {
          $node->field_file[$language->language][0] = (array) $file_temp;
        }
        else {
          $node->field_activity[$language->language][0] = (array) $file_temp;
        }
        node_save($node);
      }
      if ($node->type == 'lesson') {
        $path = url($language->language . '/node/' . $node->nid . '/lesson_pdf/', $options);
      }
      else {
        $path = url($language->language . '/node/' . $node->nid . '/activity_pdf/', $options);
      }
      drupal_goto($path, $options);
    }
  }
  if ($node->type == 'lesson') {
    $form['intro']['#markup'] = variable_get('lesson_pdf_markup',
      '<p>Please select the language version that you want to generate the lesson pdf, and click on the "Generate pdf" button in the corresponding column.<br>
  Please remember that the pdf is generate using the published content of the lesson.<br>
  Please, once the pdf is generate, check the layout to ensure that the lessons is displayed properly in the pdf file.</p>');
  }
  else {
    $form['intro']['#markup'] = variable_get('activity_pdf_markup',
      '<p>Please select the language version that you want to generate the activity pdf, and click on the "Generate pdf" button in the corresponding column.<br>
  Please remember that the pdf is generate using the published content of the MSDs activity.<br>
  Please, once the pdf is generate, check the layout to ensure that the MSD activity is displayed properly in the pdf file.</p>');
  }

  $header = [t('Language'), t('Actions'), t('Date of the PDF')];
  $rows = [];
  $installed = language_list();
  foreach ($node->translations->data as $lang => $data) {
    if ($data['status'] ==  0) {
      continue;
    }
    $dest = _napo_common_lesson_pdf_name($node, $lang);
    $date = '';
    if (file_exists($dest)) {
      $date = date('d-m-Y', filemtime($dest));
    }
    $rows[] = [
      $installed[$lang]->name,
      l(t('Generate PDF'), $lang . '/node/' . $node->nid . '/generate_pdf/pdf', [
        'language' => $lang,
        'absolute' => TRUE,
        ]
      ),
      $date
    ];
  }
  $form['rows']['#markup'] = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  return $form;
}


/**
 * Implements hook_permission().
 */
function napo_common_permission() {
  return array(
    'access generate pdf page' => [
      'title' => t('Access generate pdf page'),
      'description' => t('Allows a user to access generate pdf page.'),
    ],
  );
}

/**
 * Menu callback: autocomplete the label of an entity.
 *
 * @param $type
 *   The widget type (i.e. 'single' or 'tags').
 * @param $field_name
 *   The name of the entity-reference field.
 * @param $entity_type
 *   The entity type.
 * @param $bundle_name
 *   The bundle name.
 * @param $entity_id
 *   Optional; The entity ID the entity-reference field is attached to.
 *   Defaults to ''.
 * @param $string
 *   The label of the entity to query by.
 */
function napo_common_autocomplete_callback($type, $field_name, $entity_type, $bundle_name, $entity_id = '', $string = '') {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments and $string will only be a partial.
  // We want to make sure we recover the intended $string.
  $args = func_get_args();
  // Shift off the $type, $field_name, $entity_type,
  // $bundle_name, and $entity_id args.
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  array_shift($args);
  $string = implode('/', $args);

  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  if ($entity_id != 5) {
    return entityreference_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id, $string);
  }
  return napo_common_callback_get_matches($type, $field, $instance, $entity_type, $entity_id, $string);
}

function napo_common_callback_get_matches($type, $field, $instance, $entity_type, $entity_id = '', $string = '') {
  $matches = array();
  $prefix = '';

  $entity = NULL;
  if ($entity_id !== 'NULL') {
    $entity = entity_load_single($entity_type, $entity_id);
    $has_view_access = (entity_access('view', $entity_type, $entity) !== FALSE);
    $has_update_access = (entity_access('update', $entity_type, $entity) !== FALSE);
    if (!$entity || !($has_view_access || $has_update_access)) {
      return MENU_ACCESS_DENIED;
    }
  }

  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

  if ($type == 'tags') {
    // The user enters a comma-separated list of tags.
    // We only autocomplete the last tag.
    $tags_typed = drupal_explode_tags($string);
    $tag_last = drupal_strtolower(array_pop($tags_typed));
    if (!empty($tag_last)) {
      $prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
    }
  }
  else {
    // The user enters a single tag.
    $tag_last = $string;
  }

  if (isset($tag_last)) {
    if ($entity_id == 5) {
      $query = db_select('field_data_field_video_type', 'vt')
        ->fields('vt',['entity_id']);
      $query->condition('vt.field_video_type_tid', 2727);
      $nids = $query->execute()->fetchAllKeyed(0, 0);

      // Get an array of matching entities.
      $entity_labels_orig = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 999);
      $entity_labels = [];
      foreach ($entity_labels_orig['napo_video'] as $nid => $label) {
        if (empty($nids[$nid])) {
          continue;
        }
        $entity_labels['napo_video'][$nid] = $label;
        if (count($entity_labels['napo_video']) == 10) {
          break;
        }
      }
    }
    else {
      $entity_labels = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 10);
    }

    $denied_label = t(ENTITYREFERENCE_DENIED);
    // Loop through the products and convert them into autocomplete output.
    foreach ($entity_labels as $values) {
      foreach ($values as $entity_id => $label) {
        // Never autocomplete entities that aren't accessible.
        if ($label == $denied_label) {
          continue;
        }
        $key = "$label ($entity_id)";
        // Strip starting/trailing white spaces, line breaks and tags.
        $key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
        // Names containing commas or quotes must be wrapped in quotes.
        if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
          $key = '"' . str_replace('"', '""', $key) . '"';
        }
        $matches[$prefix . $key] = '<div class="reference-autocomplete">' . $label . '</div>';
      }
    }
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_menu_alter().
 */
function napo_common_menu_alter(&$items) {
  // Change callback to use our function.
  $items['entityreference/autocomplete/single/%/%/%']['page callback'] = 'napo_common_autocomplete_callback';
}

/**
 * Implements hook_menu().
 */
function napo_common_menu() {
  $items = array();

  //  $items['entityreference/autocomplete/tags/%/%/%'] = array(
//    'title' => 'Entity Reference Autocomplete',
//    'page callback' => 'napo_common_autocomplete_callback',
//    'page arguments' => array(2, 3, 4, 5),
//    'access callback' => 'entityreference_autocomplete_access_callback',
//    'access arguments' => array(2, 3, 4, 5),
//    'type' => MENU_CALLBACK,
//  );

  $items['node/%node/activity_pdf'] = array(
    'title' => 'Activity pdf',
    'page callback' => 'napo_common_lesson_pdf_page',
    'page arguments' => array(1),
    'access callback' => 'napo_common_activity_pdf_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/lesson_pdf'] = array(
    'title' => 'Lesson pdf',
    'page callback' => 'napo_common_lesson_pdf_page',
    'page arguments' => array(1),
    'access callback' => 'napo_common_lesson_pdf_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/generate_pdf'] = array(
    'title' => 'Lesson pdf',
    'page callback' => 'napo_common_lesson_pdf_page',
    'page arguments' => array(1),
    'access callback' => 'napo_common_download_zip_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/download_video'] = array(
    'title' => 'Download video',
    'page callback' => 'napo_common_download_video_callback',
    'page arguments' => array(1),
    'access callback' => 'napo_common_download_video_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => 4,
  );
  $items['node/%node/related_resources'] = array(
    'title' => 'Related resources',
    'page callback' => 'napo_common_related_resources_callack',
    'page arguments' => array(1),
    'access callback' => 'napo_common_download_zip_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => 4,
  );
  $items['node/%node/guidance'] = array(
    'title' => 'guidance',
    'page callback' => 'napo_common_guidance_callack',
    'page arguments' => array(1),
    'access callback' => 'napo_common_download_zip_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => 4,
  );
  $items['node/%node/download_all'] = array(
    'title' => 'Download all files',
    'page callback' => 'napo_common_download_all_callback',
    'page arguments' => array(1),
    'access callback' => 'napo_common_download_zip_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => 4,
  );

  return $items;
}

/**
 * Menu callback for "Download video" tab.
 */
function napo_common_download_video_callback($node) {
  napo_common_download_video($node);
}

/**
 * Access callback for "Download video" tab.
 */
function napo_common_download_video_access($node) {
  global $language;
  if (!empty($node) && isset($node->field_video)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $files = $wrapper->language($language->language)->field_video->value();
    if (!empty($files)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function napo_common_field_attach_view_alter(&$output, $context) {
  if (!empty($context['entity']->type)) {
    foreach (element_children($output) as $field_name) {
      $element = &$output[$field_name];
      if ($element['#field_type'] == 'image' && $element['#formatter'] == 'image') {
        foreach (element_children($element) as $delta => $item) {
          $overwrite_alt = FALSE;
          // For films, overwrite the alt with entity title - see NAPO-762
          if ($context['entity']->type == 'napo_video') {
            $overwrite_alt = TRUE;
          }
          if ($overwrite_alt) {
            $element[$delta]['#item']['alt'] = $context['entity']->title;
            $element[$delta]['#item']['title'] = $context['entity']->title;
            $element[$delta]['#item']['field_file_image_alt_text'][LANGUAGE_NONE][0]['value'] = $context['entity']->title;
            $element[$delta]['#item']['field_file_image_title_text'][LANGUAGE_NONE][0]['value'] = $context['entity']->title;
          }
          elseif (empty($item['#item']['alt'])) {
            if (empty($element[$delta]['#item']['field_file_image_alt_text'])) {
              $element[$delta]['#item']['alt'] = $context['entity']->title;
            }
            else {
              $element[$delta]['#item']['alt'] = $element[$delta]['#item']['field_file_image_alt_text'][LANGUAGE_NONE][0]['value'];
            }
          }
        }
      }
    }
  }
}

/**
 * Alter the node form to add other redirects (i.e node/%node/download).
 */
function napo_common_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['redirect'])) {
    $node = $form['#node'];
    $redirects = redirect_load_multiple(array(), array('redirect' => 'node/' . $node->nid . '/download'));
    $header = array('source', 'status_code', 'language', 'count', 'access', 'operations', 'redirect');
    $list = redirect_list_table($redirects, $header);
    $form['redirect']['napo-list'] = $list['list'];
  }
}


/**
 * Downloads video file from field_video of a node.
 */
function napo_common_download_video($node) {
  global $language;
  if (!empty($node) && isset($node->field_video)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $files = $wrapper->language($language->language)->field_video->value();
    if (!empty($files)) {
      $file = array();
      // Try finding mp4 format.
      foreach ($files as $video) {
        if ($video['filemime'] == 'video/mp4') {
          $file = $video;
          break;
        }
      }
      if (empty($files)) {
        $file = current($file);
      }
      $headers = array(
        'Content-Type'              => $file['filemime'],
        'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file['uri']) . '"',
        'Content-Length'            => $file['filesize'],
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file['uri'], $headers);
    }
  }
  drupal_set_message(t("There was an error downloading the lesson's video!"), 'error');
  drupal_not_found();
}

/**
 * Implments hook_form_FORM_ID_alter().
 */
function napo_common_form_chosen_admin_settings_alter(&$form, $form_state) {
  // Add options to chosen 30.
  $form['chosen_minimum_single']['#options']['30'] = '30';
  $form['chosen_minimum_multiple']['#options']['30'] = '30';
}

/**
 * Implements hook_node_submit().
 */
function napo_common_node_submit($node, $form, &$form_state) {
  // Add default alias for translations as the english alias (if one exists).
  $entity_trans_form = !empty($form_state['entity_translation']);
  if ($entity_trans_form && $form_state['entity_translation']['is_translation'] === TRUE
    && empty($form_state['values']['path']['alias'])) {
    $path = path_load(array('source' => 'node/' . $node->nid, 'language' => 'en'));
    if (!empty($path)) {
      $node->path['alias'] = $path['alias'];
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * Handle the case when the current language does
 * not match content node language.
 */
function napo_common_node_view($node, $view_mode, $langcode) {
  global $language;

  // Node Moderation State is not Published
  if (workbench_moderation_node_type_moderated($node->type) &&
    (!isset($node->workbench_moderation['published']) || $node->workbench_moderation['published']->current != 1)) {
    return;
  }

  $redirectId = variable_get('no_translation_nid', '248');
  $exceptions = explode(PHP_EOL, variable_get('no_translation_exceptions'));
  $exceptions_types = explode(PHP_EOL, variable_get('no_translation_type_exceptions'));

  array_walk($exceptions, function(&$value, $index) {
    $value = trim($value);
  });

  array_walk($exceptions_types, function(&$value, $index){
    $value = trim($value);
  });

  $no_exception = (!in_array($node->nid, $exceptions) && !in_array($node->type, $exceptions_types));

  if ($view_mode == 'full' && $no_exception && !isset($_GET['orig_lng'])) {
    // If current language does not match content node language.
    if (!empty($node->language) && $node->language != $language->language && $node->nid != $redirectId) {
      // Lookup translations for current node
      if(!napo_common_has_translation($node->nid, $language)) {
        // Redirect to a static page if there's not a translation
        // in the currently active language.
        $nodeLanguage = $language->language;
        if (!napo_common_has_translation($redirectId, $language)) {
          // Uncomment after static page (No translation available) translation
          //$nodeLanguage = 'en';
        }

        // Fallback CA to ES and other languages to EN - NAPO-595
        if($language->language == 'ca'){
          drupal_goto(drupal_get_path_alias('node/'.$node->nid, $language->language),
              array(
                  'query' => array('orig_lng' => 'es'),
                  'language' => (object)array('language' => $language->language),
                  'prefix' => $language->language.'/',
              )
          );
        }else{
          return;
        }

        // Redirect to no translation available page.
        drupal_goto(drupal_get_path_alias('node/'.$redirectId, $nodeLanguage),
          array(
            'query' => array('destination' => 'node/'.$node->nid),
            'language' => (object)array('language' => $nodeLanguage),
            'prefix' => $nodeLanguage.'/',
          )
        );
      }
    }
  }

  // Hide node title for redirect node page.
  if ($node->nid == $redirectId) {
    hide($node->content['title_field']);
  }

//  $full_mode_views = array('full', 'episode_full');
//  if (!in_array($view_mode, $full_mode_views)) {
//    if (!empty($node->field_archived[LANGUAGE_NONE][0]['value'])) {
//      if (!empty($node->content['title_field'][0]['#markup'])) {
//        $node->content['title_field'][0]['#markup'] .= '<span class="title-archived">' . t('Archived') . '</span>';
//      }
//    }
//  }
}

/**
 * Implements hook_field_language_alter().
 * Performs language fallback for requests that have orig_lng as parameter
 */
function napo_common_field_language_alter(&$display_language, $context) {
  $entity = $context['entity'];
  $entity_type = $context['entity_type'];
  $fallback_language = 'en';
  if(isset($_GET['orig_lng'], $entity->nid) && $entity->nid == arg(1) && $entity_type == 'node') {
    if(preg_match('/[a-z]{2}/', $_GET['orig_lng'])) {
      $fallback_language = $_GET['orig_lng'];
    }
    locale_field_language_fallback($display_language, $entity, $fallback_language);
  }
}

/**
 * Check if a node has translation for a specified language
 */
function napo_common_has_translation($nid, $language) {
  $hasTranslation = FALSE;
  $node = node_load($nid);
  if(!$node) {
    return FALSE;
  }
  $translations = $node->translations->data;

  if(isset($translations[$language->language])) {
    $hasTranslation = TRUE;
  }
  return $hasTranslation;
}

/**
 * Implements hook_block_info().
 */
function napo_common_block_info() {
  $blocks = array();
  $blocks['no_translation'] = array(
    'info' => t('Translation not available'),
  );
  $blocks['page_not_found'] = array(
    'info' => t('Page not found'),
  );

  $blocks['napo_print_friendly'] = array(
    'info' => t('Print friendly'),
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'region' => 'header_top_bar',
  );

  $blocks['osha_archived_content'] = array(
    'info' => t('Node archived info block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

function napo_common_block_info_alter(&$blocks, $theme, $code_blocks) {
  $blocks['text_resize'][0]['cache'] = DRUPAL_NO_CACHE;
}

/**
 * Implements hook_block_configure().
 */
function napo_common_block_configure($delta = '') {
  $form = array();

  switch($delta) {
    case 'no_translation':
      // No translation node Id
      $form['no_translation_nid'] = array(
        '#type' => 'textfield',
        '#title' => 'No translation page nid',
        '#default_value' => variable_get('no_translation_nid', '248'),
      );

      $form['no_translation_text'] = array(
        '#type' => 'textarea',
        '#title' => 'Page content',
        '#description' => "Content of the no translation available page",
        '#default_value' => variable_get('no_translation_text', 'OOPS!<br />Translation not available.<br />What do you want to do next?'),
      );
      $form['no_translation_exceptions'] = array(
        '#type' => 'textarea',
        '#title' => 'Exceptions - node IDs',
        '#description' => "IDs for which the rule doesn't apply. Enter one node ID per line.",
        '#default_value' => variable_get('no_translation_exceptions'),
      );
      $form['no_translation_type_exceptions'] = array(
        '#type' => 'textarea',
        '#title' => 'Exceptions - content types',
        '#description' => "Content types for which the rule doesn't apply. Enter one content type per line.",
        '#default_value' => variable_get('no_translation_type_exceptions'),
      );
      break;

    case 'page_not_found':
      // Page not found text.
      $form['page_not_found_text'] = array(
        '#type' => 'textfield',
        '#title' => 'Page not found text',
        '#default_value' => variable_get('page_not_found_text',
          "OOPS!<br />Sorry, we can't find what<br />you are looking for"),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function napo_common_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'no_translation':
      // Saving static page nid.
      variable_set('no_translation_nid', $edit['no_translation_nid']);
      // Saving content
      variable_set('no_translation_text', $edit['no_translation_text']);
      // Saving exceptions
      variable_set('no_translation_exceptions', $edit['no_translation_exceptions']);
      // Saving content types exceptions
      variable_set('no_translation_type_exceptions', $edit['no_translation_type_exceptions']);
      break;

    case 'page_not_found':
      // Saving page not found text.
      variable_set('page_not_found_text', $edit['page_not_found_text']);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function napo_common_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'no_translation' :
      $block['content'] = drupal_get_form('napo_common_no_translation_form');
      break;

    case 'page_not_found' :
      $block['content'] = napo_common_page_not_found_content();
      break;

    case 'napo_print_friendly':
      $block['subject'] = "<none>";
      $block['content'] = theme('napo_print_friendly_block');
      break;

    case 'osha_archived_content':
      $block['subject'] = t('NAPO archived content');
      $block['content'] = napo_common_archived_content_block_view();
      break;
  }

  return $block;
}

/**
 * Implements hook_node_access().
 */
function napo_common_node_access($node, $op, $account) {
  // Deny access for content with future published date.
  if ($op == 'view' && !user_access('view all unpublished content')) {
    if (!empty($node->field_publication_date)) {
      $wrapper = entity_metadata_wrapper('node', $node);
      $publication_date = $wrapper->field_publication_date->value();
      if ($publication_date > time()) {
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}

function napo_common_no_translation_form($form, &$form_state) {
  global $base_url, $language;
  $form = $available = array();
  if (empty($_REQUEST['destination'])) {
    return;
  }
  $nid = str_replace('node/', '', $_REQUEST['destination']);
  if (!$node = node_load($nid)) {
    return;
  }

  // Get node translations.
  $translations = array_keys($node->translations->data);
  sort($translations);
  // Get installed languages.
  $installed = language_list();

  // Set an array with available translations and languages names.
  foreach ($translations as $lng) {
    if (isset($installed[$lng])) {
      $available[$lng] = $installed[$lng]->native;
    }
  }

  $form['page_content'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="no_translation_page_content">'.
      t(variable_get('no_translation_text', 'OOPS!<br />Translation not available.<br />What do you want to do next?'))
      .'</div>',
  );

  // Available translations
  $form['available_languages'] = array(
    '#type' => 'select',
    '#title' => t('See this page in other language'),
    '#empty_option' => t('Select translation'),
    '#options' => $available,
    '#attributes' => array(
      'class' => array('lang-dropdown-select-element'),
    ),
  );

  $form['link_to_home'] = array(
    '#type' => 'markup',
    '#markup' =>
      "<div class = 'page_not_found_front'>".
      "<label>".t('Try this instead')."</label>".
      l(t('back to home'), '<front>').
      "</div>",
  );

  // Redirect node translations.
  foreach ($available as $lngCode => $lngValue) {
    $form[$lngCode] = array(
      '#type' => 'hidden',
      '#default_value' => '/'.$language->language.'/'.drupal_get_path_alias('node/'.$nid).'?orig_lng='.$lngCode,
    );
  }

  // URL of the page that has no translation
  $form['no_translation_request'] = array(
    '#type' => 'hidden',
    '#default_value' => $base_url.'/en/'.drupal_get_path_alias('node/'.$nid),
  );

  // Send mail button
  /*
  $form['no_translation_mail'] = array(
    '#type' => 'submit',
    '#prefix' => t('Help us: Tell us this page is not available in your language '),
    '#value' => 'Send',
  );
  */
  return $form;
}


/**
 * Form submit handler
 */
/*
function napo_common_no_translation_form_submit($form, &$form_state) {
  $site_email = variable_get('site_mail', ini_get('sendmail_from'));

  drupal_mail('napo_common', 'no_translation', $site_email, language_default(), $form_state);
  drupal_set_message(t('The mail has been submitted. Thank you!'));
  //redirect to home page
  drupal_goto('<front>');
}
*/

/**
 * Implements hook_webform_select_options_info().
 *
 * See webform/webform.api.php for further information on
 * this hook in the Webform API.
 */
function napo_common_webform_select_options_info() {
  $items = array();
  $items['available_languages'] = array(
    'title' => t('Languages'),
    'options callback' => 'napo_common_webform_pre_build_list_languages',
  );

  return $items;
}

/**
 * Build an options list (available languages)
 * to be used with webforms select list.
 */
function napo_common_webform_pre_build_list_languages() {
  $available_languages = array();
  $languages = osha_language_list(TRUE);
  foreach($languages as $key => $language) {
    $available_languages[$key] = $language->native;
  }

  return $available_languages;
}

/**
 * Page not found content.
 */
function napo_common_page_not_found_content() {
  // Intro text.
  $content = "<div class = 'page_not_found_intro'>";
  $content .= t(variable_get('page_not_found_text', "OOPS!<br />Sorry, we can't find what<br />you are looking for"));
  $content .= '</div>';

  // Search block.
  $content .= "<div class = 'page_not_found_search'>";
  $search_block = module_invoke('search', 'block_view');
  $content .= '<div>' . t('Try one of these instead:') . '</div>';
  $content .= render($search_block);
  $content .= '</div>';

  // Frontpage link.
  $content .= "<div class = 'page_not_found_front'>";
  $content .= l(t('back to home'), '<front>');
  $content .= '</div>';

  return $content;
}

/**
 * Implements hook_theme().
 */
function napo_common_theme() {
  return array(
    'napo_print_friendly_block' => array(),

    'napo_common_archived_content' => array(
      'variables' => array(),
      'template' => 'theme/napo_common_archived_content'
    ),
  );
}

/**
 * Callback for archived content block view.
 */
function napo_common_archived_content_block_view() {
  $node = menu_get_object();
  if (!empty($node) && napo_common_node_is_archived($node)) {
    return theme('napo_common_archived_content', array());
  }
  return '';
}

function napo_common_field_formatter_info() {
  return array(
    'lesson_download' => array(
      'label' => t('Lesson download'),
      'description' => t('Lesson download block.'),
      'field types' => array('file', 'image'),
      'settings' => array(
      ),
    ),
    'msd_starter' => array(
      'label' => t('MSD starter'),
      'description' => t('MSD starter file + description.'),
      'field types' => array('file', 'image'),
      'settings' => array(
      ),
    ),

    'napo_introductory_text' => array(
      'label' => t('napo introductory text'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array(
      ),
    ),

    'napo_acordion' => array(
      'label' => t('napo acordion'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array(
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function napo_common_field_formatter_info_alter(&$info) {
  // Alter the title_linked formatter by assing this module to it.
  $info['title_linked']['module'] = 'napo_common';
  // Add custom settings default.
  $info['title_linked']['settings']['title_archived_label'] = FALSE;
  $info['title_linked']['settings']['napo_common_title_prefix'] = '';
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Alter the settings form of title_linked formatter.
 */
function napo_common_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $form = title_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
  $settings = $instance['display'][$view_mode]['settings'];
  $form['napo_common_title_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('A prefix appended to the title'),
    '#default_value' => $settings['napo_common_title_prefix'],
  );
  $form['title_archived_label'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include archived label'),
    '#default_value' => $settings['title_archived_label'],
  );

  // Let other napo modules to interact with this form.
  drupal_alter('napo_common_field_formatter_settings_form', $field, $instance, $view_mode, $form, $form_state);
  return $form;
}

function napo_common_field_formatter_settings_summary($field, $instance, $view_mode) {
  return title_field_formatter_settings_summary($field, $instance, $view_mode);
}

function _napo_common_resources_required_files($node) {
  global $language;
  $files = [];
  if ($node->field_resources_required) {
    foreach($node->field_resources_required[LANGUAGE_NONE] as $row) {
      $resource = node_load($row['target_id']);
      $wrapper = entity_metadata_wrapper('node', $resource);
      $file = $wrapper->language($language->language)->field_file->value();
      if ($file) {
        $files[] = $file;
      }
    }
  }
  if (variable_get('allow_msds_resources_required', FALSE) && $node->field_msds_resources_required) {
    foreach($node->field_resources_required[LANGUAGE_NONE] as $row) {
      $resource = node_load($row['target_id']);
      $wrapper = entity_metadata_wrapper('node', $resource);
      $file = $wrapper->language($language->language)->field_file->value();
      if ($file) {
        $files[] = $file;
      }
    }
  }
  return $files;
}

function napo_common_related_resources_callack($node) {
  $files = _napo_common_resources_required_files($node);
  $archive_drupal_path = napo_common_archive_files($files, 'resources_required_' . rand(10,9999) . '.zip');
  if ($archive_drupal_path) {
    napo_common_download_archive($archive_drupal_path);
  }
  else {
    drupal_set_message(t("There was an error downloading the related resources!"), 'error');
    drupal_not_found();
  }
}

function _napo_common_get_guidance_files($type) {
  global $language;
  if ($type == 'lesson') {
    $nid = variable_get('teacher_guidance_nid', 407);
    $node = node_load($nid);
    $wrapper = entity_metadata_wrapper('node', $node);
    $files[] = $wrapper->language($language->language)->field_guidance_file->value();
  }
  else {
    $nid = variable_get('facilitator_guidance_nid', 408);
    $node = node_load($nid);
    $wrapper = entity_metadata_wrapper('node', $node);
    $files[] = $wrapper->language($language->language)->field_guidance_file->value();
    $files[] = $wrapper->language($language->language)->field_activity_list_file->value();
    $files[] = $wrapper->language($language->language)->field_menu->value();
  }
  return $files;
}

function napo_common_guidance_callack($node) {
  $files = _napo_common_get_guidance_files($node->type);
  $archive_drupal_path = napo_common_archive_files($files, 'guidance_' . rand(10,9999) . '.zip');
  if ($archive_drupal_path) {
    napo_common_download_archive($archive_drupal_path);
  }
  else {
    drupal_set_message(t("There was an error downloading the files!"), 'error');
    drupal_not_found();
  }
}

function _napo_common_download_all_files($node) {
  global $language;
  $files = [];

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($node->type == 'lesson') {
    $lesson_video_nid = $node->field_lesson_video[LANGUAGE_NONE][0]['target_id'];
    $file = $wrapper->language($language->language)->field_file->value();
  }
  else {
    $lesson_video_nid = $node->field_msds_video[LANGUAGE_NONE][0]['target_id'];
    $file = $wrapper->language($language->language)->field_activity->value();
  }
  if ($file) {
    $files[] = $file;
  }
  if ($lesson_video_nid) {
    $lesson_video = node_load($lesson_video_nid);
    $wrapper = entity_metadata_wrapper('node', $lesson_video);
    $files[] = $wrapper->language($language->language)->field_video->value()[0];
  }
  $resources = _napo_common_resources_required_files($node);
  if ($resources) {
    $files = array_merge($files, $resources);
  }
  $guidance_files = _napo_common_get_guidance_files($node->type);
  if ($guidance_files) {
    $files = array_merge($files, $guidance_files);
  }
  return $files;
}

function napo_common_archive_files($files, $basename, $drupal_dir_path = NAPO_FILM_DOWN_CENTER_PATH) {
  if (!empty($files)) {
    $dir_path = drupal_realpath($drupal_dir_path);
    // Return if dir don't exists.
    if (!file_prepare_directory($drupal_dir_path, FILE_CREATE_DIRECTORY)) {
      watchdog('napo_film', 'The directory !dir could not be accessed!', array('!dir' => $drupal_dir_path), WATCHDOG_ERROR);
      return NULL;
    }
    // Check if it's enough disks pace to create the archive.
    $files_size = 0;
    foreach ($files as $file) {
      $files_size += $file['filesize'];
      if (disk_free_space($dir_path) < $files_size) {
        watchdog('napo_film', 'There is not enough space to create a zip with files of !size MB!',
          array('!size' => $files_size / pow(1024, 2)), WATCHDOG_ERROR);
        return NULL;
      }
    }

    $pclzip_library = libraries_load('pclzip');
    libraries_load_files($pclzip_library);
    // Open the archive.
    $archive_path = file_create_filename($basename, $dir_path);
    $archive = new PclZip($archive_path);
    $files_paths = array();
    foreach ($files as $file) {
      $files_paths[] = drupal_realpath($file['uri']);
    }
    $result = $archive->add($files_paths, PCLZIP_OPT_REMOVE_ALL_PATH, PCLZIP_OPT_TEMP_FILE_THRESHOLD, 10);
    if (empty($result)) {
      watchdog('napo_film', 'Empty result!', array(), WATCHDOG_ERROR);
      return NULL;
    }
    // Return drupal scheme file path.
    $archive_name = drupal_basename($archive_path);
    $archive_drupal_path = $drupal_dir_path . '/' . $archive_name;
    return $archive_drupal_path;
  }
  watchdog('napo_film', 'emptry files!', array(), WATCHDOG_ERROR);
  return NULL;
}

function napo_common_download_archive($archive_drupal_path) {
    if (!empty($archive_drupal_path)) {
      $file = [];
      $file['uri'] = $archive_drupal_path;
      $file['filesize'] = filesize($archive_drupal_path);
      $file['filemime'] = 'application/zip';
      $headers = array(
        'Content-Type'              => $file['filemime'],
        'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file['uri']) . '"',
        'Content-Length'            => $file['filesize'],
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file['uri'], $headers);
    }
}

function napo_common_download_all_callback($node) {
  $files = _napo_common_download_all_files($node);
  $archive_drupal_path = napo_common_archive_files($files, 'download_' . rand(10,9999) . '.zip');
  if ($archive_drupal_path) {
    napo_common_download_archive($archive_drupal_path);
  }
  else {
    drupal_set_message(t("There was an error downloading the files!"), 'error');
    drupal_not_found();
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function napo_common_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'napo_acordion':
      $display = 'none';
      if (arg(2) == 'generate_pdf') {
        $display = 'block';
      }
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => '<div class="acordion--block--item">'.
            '<h3 class="acordion-content-title active">' . t($instance['label']) . '</h3>'.
            '<div class="acordion-content-text" style="display: ' . $display . ';">' . $item['safe_value'] . '</div></div>',
        );
      }
      return $element;
      break;

    case 'msd_starter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => '<div class=""><a href="' . file_create_url($item['uri']) . '" target="_blank">'. $item['description'] . '</a></div>',
        );
      }
      return $element;
      break;

    case 'lesson_download':
      return $element;
      break;

    case 'napo_introductory_text':
      $node = menu_get_object();
      $nid = variable_get('teacher_guidance_nid', 407);
      $guidance_title = t('Teacher guidance');
      $guidance_text = variable_get('teacher_guidance_text', 'Do you need help to organise a learning activity in your classroom?');
      if ($node->type == 'msds_activities') {
        $nid = variable_get('facilitator_guidance_nid', 408);
        $guidance_title = t('Facilitator guidance');
        $guidance_text = variable_get('facilitator_guidance_text', 'Do you need help to organise a learning activity in your workplace?');
      }
      $guidance_href = url('node/' . $nid);
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => '<div class="detail--content--block"><div class="text-block">
          <p>' . $item['safe_value'].'</p>
        </div>
        <div class="guidance-block">
          <p class="guidance-title">' . $guidance_title . '</p>
          <p class="guidance-text">' . t($guidance_text) . '</p>
          <p><a href="' . $guidance_href . '" class="more-link" target="_blank">' . t('Find out more here') . '</a></p>
        </div></div>',
        );
      }
      return $element;
      break;

  }


  // If is film/episode, use custom formatter.
  if ($entity_type == 'node' && $entity->type == 'napo_video') {
    $element = napo_film_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  else {
    $element = title_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  $settings = $display['settings'];
  if (!empty($settings['title_archived_label']) && napo_common_node_is_archived($entity)) {
    $element[0]['#markup'] .= '<span class="title-archived"> ' . t('Archived') . '</span>';
  }

  if (!empty($settings['napo_common_title_prefix'])) {
    $element[0]['#markup'] = '<span class="napo_common_title_prefix">' . t($settings['napo_common_title_prefix']) . '</span>' . $element[0]['#markup'];
  }

  return $element;
}

/**
 * Implements hook_views_query_alter().
 */
function napo_common_views_query_alter(&$view, &$query) {
  global $language;
  if (('napo_workplaces' == $view->name) || ('napo_for_teachers' == $view->name)) {
    if (variable_get('napo_common_filter_by_language', TRUE)) {
      foreach ($query->table_queue as $field_name => &$field) {
        if (strpos($field_name, 'field_data_field_') !== 0) {
          continue;
        }
        if (in_array($field_name, ['field_data_field_lesson_video', 'field_data_field_msds_video', 'field_data_field_tags'])) {
          continue;
        }
        $field['join']->extra[] = [
          'field' => 'language',
          'value' => $language->language,
        ];
      }
    }
    if ($query->where[2]['conditions']) {
      $key = 0;
      $conditions = $query->where[2]['conditions'][$key]['field']->conditions();
      if ($conditions) {
        if ($conditions['#conjunction'] = 'AND') {
          $db_or_and = db_and();
        }
        else {
          $db_or_and = db_or();
        }
        foreach ($conditions as $condition) {
          if (!is_array($condition)) {
            continue;
          }
          $search = 'field_data_title_field.title_field_value';
          $replace = $search . ", ' ', taxonomy_term_data_field_data_field_tags.name";
          $condition['field'] = str_replace($search,$replace, $condition['field']);
          $db_or_and->where($condition['field'], $condition['value']);
        }
        $query->where[2]['conditions'][$key]['field'] = $db_or_and;
      }
    }
  }
}

/**
 * If node is mark as outdated or not.
 */
function napo_common_node_is_archived($node) {
  if (isset($node->field_archived[LANGUAGE_NONE][0]['value']) &&
    $node->field_archived[LANGUAGE_NONE][0]['value'] == 1) {
    return TRUE;
  }
  return FALSE;
}

// Create a theme function that can be overridden by other theme developers.
function theme_napo_print_friendly_block() {
  // Add js and css
  $content = array(
    '#attached' => array(
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'napo_common') . '/js/napo_print_friendly.js',
          'type' => 'file',
          'weight' => 10,
        )
      ),
    ),
  );

  $content['#markup'] = t('Print friendly:');
  $content['#markup'] .= '&nbsp;<a href="javascript:if(window.print)window.print();"><span class="glyphicon glyphicon-print"></span></a>';

  return render($content);
}

/**
 * Get users by role
 */
function napo_common_get_users_by_role ($role_name){
  $role = user_role_load_by_name($role_name);
  $uids = db_select('users_roles', 'ur')
    ->fields('ur', array('uid'))
    ->condition('ur.rid', $role->rid, '=')
    ->execute()
    ->fetchCol();
  $users = user_load_multiple($uids);

  return $users;
}

/**
 * Implements hook_preprocess_node().
 */
function napo_common_preprocess_node(&$vars) {
  $node = $vars['node'];
  // Add share widget ds field.
  if (!empty($vars['preprocess_fields'])) {
    if (in_array('share_widget', $vars['preprocess_fields'])) {
      $vars['share_widget'] = napo_common_get_share_widget($node);
    }
    if (in_array('back_button', $vars['preprocess_fields'])) {
      napo_common_back_button($vars);
    }
    if (in_array('top_anchor', $vars['preprocess_fields'])) {
      napo_common_top_anchor($vars);
    }
  }
}

function napo_common_get_share_widget($node) {
  global $language;
  $url = url('/node/' . $node->nid, array('absolute' => TRUE));
  $title = field_get_items('node', $node, 'title_field');
  $title = current($title)['value'];
  $site_name = variable_get('site_name', '');
  // Construct the tweet.
  $twitter_text = $title . ' | ' . $site_name;
  $tweet_url = url('https://twitter.com/intent/tweet', array(
    'query' => array(
      'original_referer' => $url,
      'text' => $twitter_text,
      'url' => shorten_url($url),
    ),
  ));
  $vars = array(
    'url' => $url,
    'tweet_url' => $tweet_url,
    'node' => $node,
    'language' => $language,
  );
  return theme('napo_film_share_widget', $vars);
}

/**
 * Back button link and text
 */
function napo_common_back_button(&$vars){
  global $base_url;
  $node = $vars['node'];
  $options = array(
    'attributes' => array(
      'class' => 'back_button',
      'id' => 'napo_back_button',
      'rel' => $node->type,
    ),
    'html' => TRUE,
  );

  switch ($node->type) {
    case 'napo_album':
      $breadcrumb = drupal_get_breadcrumb();
      $page_title = array_pop($breadcrumb);
      $previous_crumb = array_pop($breadcrumb);
      $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
      if (preg_match("/$regexp/siU", $previous_crumb, $matches)) {
        $url = strpos($matches[2], $base_url) !== FALSE ? $matches[2] : $base_url . $matches[2];
        $view = views_get_view('napos_gallery');
        $items_per_page = $view->display['default']->display_options['pager']['options']['items_per_page'];
        $view->set_display('napos_gallery_items');
        $view->set_items_per_page('0');
        $view->pre_execute();
        $view->execute();
        $galleries = array();
        $i = 1;
        if ($view->result) {
          foreach ($view->result as $res) {
            $galleries[$i++] = $res->nid;
          }
          $gallery_position = array_search($node->nid, $galleries);
          if ($items_per_page != 0) {
            $gallery_position_page = (ceil($gallery_position / $items_per_page) - 1);
            if ($gallery_position_page != 0) {
              $url .= '?page=' . $gallery_position_page;
            }
          }
        }
        $vars['back_button'] = l(t('Back to !link', array('!link' => $matches[3])), $url, $options);
        return;
      }
      break;

    case 'napo_video':
      $vars['back_button'] = l(t('Back to Films'), '/napos-films/films', $options);
      break;

    case 'lesson':
      $vars['back_button'] = '<p class="btn-back">' . l(t('Back to Napo for teachers'), NAPO_TEACHERS_URL, []) . '</p>';
      break;

    case 'msds_activities':
      $vars['back_button'] = '<p class="btn-back">' . l(t('Back to Napo in the workplace'), NAPO_WORKPLACES_URL, []) . '</p>';
      break;

    default:
      break;
  }
}

/**
 * Anchor to top of the page
 */
function napo_common_top_anchor(&$vars) {
  $options = array(
    'attributes' => array(
      'class' => 'top_anchor',
    ),
    'external' => TRUE,
    'fragment' => 'top',
    'html' => TRUE,
  );
  $icon_path = drupal_get_path('theme', 'napo_frontend') . '/images/anchor-top.png';
  $image_info = image_get_info($icon_path);
  $image_vars = array(
    'path' => $icon_path,
    'alt' => t('Go to top'),
    'height' => $image_info['height'],
    'width' => $image_info['width'],
  );
  $image = theme('image', $image_vars);
  $vars['top_anchor'] = l($image, '', $options);
}
