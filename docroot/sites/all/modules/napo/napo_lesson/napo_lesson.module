<?php
/**
 * @file
 * Code for the Napo Lesson feature.
 */

include_once 'napo_lesson.features.inc';

/**
 * Implements hook_menu().
 */
function napo_lesson_menu() {
  $items = array();
  $items['using-napo/napo-for-teachers/download_video/%'] = array(
    'title' => 'Download lesson video',
    'page callback' => 'napo_lesson_download_video',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['learning-with-napo/napo-for-teachers/download_video/%'] = array(
    'title' => 'Download lesson video',
    'page callback' => 'napo_lesson_download_video',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  // Reorder lesson tab for lessons, but it redirects
  // to it's lesson toolkit tab.
  $items['node/%/reorder_lessons_r'] = array(
    'title' => 'Reorder lessons',
    'page callback' => 'napo_lesson_reorder_lesson_redirect',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'napo_lesson_reoder_lessons_redirect_callback',
  );

  // Reorder toolkit tab.
  $items['taxonomy/term/%taxonomy_term/reorder_toolkit'] = array(
    'title' => 'Reorder toolkit',
    'page callback' => 'napo_lesson_reorder_toolkit',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'napo_lesson_reorder_toolkit_access',
    'access arguments' => array(2),
    'weight' => 3,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function napo_lesson_menu_alter(&$items) {
  // Add access callback for Reorder lesson tab.
  $items['node/%/reorder_lessons']['access callback'] = 'napo_lesson_reoder_lessons_access_callback';
}

/**
 * Redirect the user to the Reorder lessons page of the toolkit.
 */
function napo_lesson_reorder_lesson_redirect($nid) {
  $toolkit_id = _napo_lesson_get_toolkit_id($nid);
  if (!empty($toolkit_id)) {
    drupal_goto('node/' . $toolkit_id . '/reorder_lessons');
  }
  else {
    drupal_goto();
  }
}

/**
 * Callback for lesson toolkit reorder local task.
 */
function napo_lesson_reorder_toolkit($term) {
  $view = views_get_view('lesson_toolkit_reorder');
  $view->set_display('reorder_toolkit');
  $view_filters = $view->display_handler->get_option('filters');
  $view_filters['field_target_ages_tid']['value'] = drupal_map_assoc(array($term->tid));
  $overrides = array();
  $overrides['filters'] = $view_filters;
  foreach ($overrides as $option => $definition) {
    $view->display_handler->override_option($option, $definition);
  }
  $view->pre_execute();
  return $view->render('reorder_toolkit');
}

/**
 * Access callback for Reorder toolkit tab.
 */
function napo_lesson_reorder_toolkit_access($term) {
  if (user_access('edit any lesson_toolkit content') && $term->vocabulary_machine_name == 'target_ages') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Reorder tab on lessons only visible if have toolkit.
 */
function napo_lesson_reoder_lessons_redirect_callback() {
  if (!user_access('edit any lesson content')) {
    return FALSE;
  }
  // Reorder menu only for toolkit.
  $node = node_load(arg(1));
  if ($node && $node->type == 'lesson') {
    $toolkit = field_get_items('node', $node, 'field_lesson_toolkit');
    if (!empty($toolkit)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_module_implements_alter().
 */
function napo_lesson_module_implements_alter(&$implementations, $hook) {
  // Run our hook after the views hook.
  if ($hook == 'menu_alter') {
    if (isset($implementations['napo_lesson'])) {
      unset($implementations['napo_lesson']);
      $implementations['napo_lesson'] = FALSE;
    }
  }
}

/**
 * Access callback for Reorder lessons tab.
 */
function napo_lesson_reoder_lessons_access_callback($options) {
  // Run the default access callback.
  $access_callback = $options[0];
  $access_arguments = $options[1];
  $access = call_user_func_array($access_callback, $access_arguments);
  if (!$access) {
    return FALSE;
  }
  // Reorder menu only for films.
  $node = node_load(arg(1));
  if ($node && $node->type == 'lesson_toolkit') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function napo_lesson_theme() {
  return array(
    'right_menu' => array(
      'variables' => array(
        'node' => array(),
      ),
      'template' => 'theme/right_menu',
    ),
    'top_menu' => array(
      'variables' => array(
        'node' => array(),
        'lessons' => array(),
      ),
      'template' => 'theme/top_menu',
    ),
    'napo_lesson_first_lesson_link' => array(
      'variables' => array('entity' => NULL, 'file' => NULL, 'delta' => NULL),
    ),
    'download_whole_lesson' => array(
      'variables' => array(
        'video_id' => array(),
      ),
      'template' => 'theme/download_whole_lesson',
    ),
  );
}

function napo_lesson_get_intro_block($node) {
  global $language;
  $nid = variable_get('teacher_guidance_nid', 407);
  $guidance_title = t('Teacher guidance');
  if ($node->type == 'msds_activities') {
    $nid = variable_get('facilitator_guidance_nid', 408);
    $guidance_title = t('Facilitator guidance');
    $video = $node->field_msds_video[LANGUAGE_NONE]['0']['entity'];
  }
  else {
    $video = $node->field_lesson_video[LANGUAGE_NONE]['0']['entity'];
  }
  $guidance_href = url('node/' . $nid);
  $wrapper = entity_metadata_wrapper('node', $video);
  $text = strip_tags($wrapper->language($language->language)->body->value()['value']);
  return '<div class="detail--content--block"><div class="text-block">
<p>' . $text . '</p>
</div>
<div class="guidance-block">
<p class="guidance-title">' . $guidance_title . '</p>
<p class="guidance-text">' . t('Do you need help to organize a learning activity in your workplace?') . '</p>
<p><a href="' . $guidance_href . '" class="more-link" target="_blank">' . t('Find out more here') . '</a></p>
</div></div>';
}

function napo_lesson_get_resources_required($node) {
  global $language;
  $items = [];
  if ($node->type == 'lesson') {
    $resources_required = $node->field_resources_required;
  }
  else {
    $resources_required = $node->field_msds_resources_required;
  }
  if (!empty($resources_required)) {
    foreach($resources_required[LANGUAGE_NONE] as $row) {
      $resource = node_load($row['target_id']);
      if ($resource) {
        $wrapper = entity_metadata_wrapper('node', $resource);
        $items[] = $wrapper->language($language->language)->title_field->value();
      }
    }
  }
  if ($node->type == 'lesson') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $lesson_video = $wrapper->language($language->language)->field_lesson_video->value();
    $items[] = '<a href="#videojs-' . $lesson_video->nid . '-field-video-video">' . $node->title . '</a>';
  }
  if ($node->type == 'msds_activities') {
    $wrapper = entity_metadata_wrapper('node', $node);
    $msds_video = $wrapper->language($language->language)->field_msds_video->value();
    $items[] = '<a href="#videojs-' . $msds_video->nid . '-field-video-video">' . $node->title . '</a>';
  }
  if (!$items) {
    return '';
  }
  $output = theme('item_list', array('items' => $items));

  $text = variable_get('resources_required_text', '');
  if (!$text) {
    $text = variable_get('download_provided_resources_text', 'To download the provided resources, go to:');
    $options['attributes'] = ['target' => '_blank'];
    $options['absolute'] = TRUE;
    $title = variable_get('napo_resources_text', 'Resource library');
    $url = variable_get('napo_resources_url', 'learning-with-napo/napo-for-teachers/resource-library');
    $url = url($url, $options);
    $text .= ' ' . l($title, $url, $options);
  }
  if ($node->type == 'lesson') {
    $output .= $text;
  }
  return '<div class="acordion--block--item">'.
  '<h3 class="acordion-content-title active">' . t('Resources required') . '</h3>'.
  '<div class="acordion-content-text" style="display: none;">' . $output . '</div></div>';
}

function napo_lesson_get_download_block($node) {
  global $language;

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($node->type == 'lesson') {
    $file_title = t('Lesson');
    $file_uri = $wrapper->language($language->language)->field_file->value()['uri'];
    $lesson_video = $node->field_lesson_video[LANGUAGE_NONE][0]['entity'];
    if ($lesson_video && !empty($lesson_video->field_video)) {
      $wrapper = entity_metadata_wrapper('node', $lesson_video);
      $video = $wrapper->language($language->language)->field_video->value()[0];
    }
  }
  else {
    $file_title = t('Activity');
    $file_uri = $wrapper->language($language->language)->field_activity->value()['uri'];
    $lesson_video = $node->field_msds_video[LANGUAGE_NONE][0]['entity'];
    if ($lesson_video && !empty($lesson_video->field_video)) {
      $wrapper = entity_metadata_wrapper('node', $lesson_video);
      $video = $wrapper->language($language->language)->field_video->value()[0];
    }
  }

  $video_uri = @$video['uri'];
  $video_id = $lesson_video->nid;

  if ($video_uri) {
    $output = '<a href="' . url('learning-with-napo/napo-for-teachers/download_video/' . $video_id) . '">';
    $output .= t('Video');
    $size = @filesize($video_uri);
    if ($size) {
      $output .= ' <span class="related_size">(' . format_size($size) . ')</span>';
    }
    $output .= '</a>';
    $items[] = $output;
  }

  if ($file_uri) {
    $output = '<a href="' . file_create_url($file_uri) . '" target="_blank">';
    $output .= $file_title;
    $size = @filesize($file_uri);
    if ($size) {
      $output .= ' <span class="related_size">(' . format_size($size) . ')</span>';
    }
    $output .= '</a>';

    $items[] = $output;
  }

  $resources_required = NULL;
  if ($node->type == 'lesson') {
    $resources_required = $node->field_resources_required;
    $nid = variable_get('teacher_guidance_nid', 407);
    $guidance = node_load($nid);
    $wrapper = entity_metadata_wrapper('node', $guidance);
    $file = $wrapper->language($language->language)->field_guidance_file->value();
    $items[] = l(t('Teacher guidance'), file_create_url($file['uri']));
  }
  else {
    //    $nid = variable_get('facilitator_guidance_nid', 408);
    $items[] = l(t('Facilitator guidance'),'node/' . $node->nid . '/guidance');
  }

  if ($resources_required && $resources_required[LANGUAGE_NONE]) {
    $items[] = l(t('Related resources'),'node/' . $node->nid . '/related_resources');
  }

  $items[] = '<a href="' . url('node/' . $node->nid . '/download_all') . '">' . t('DOWNLOAD ALL') . '</a>';
  $list = theme('item_list', array('items' => $items));
  return '<div class="download--section--block"><h3>' . t('Download') . '</h3>' . $list . '</div>';
}

/**
 * Implements hook_preprocess_node().
 */
function napo_lesson_preprocess_node(&$vars) {
  $node = $vars['node'];

  if($node->type == 'msds_activities') {
    if (!empty($vars['preprocess_fields'])) {
      if (in_array('intro_block', $vars['preprocess_fields'])) {
        $vars['intro_block'] = napo_lesson_get_intro_block($node);
      }

      if (in_array('download_block', $vars['preprocess_fields'])) {
        $vars['download_block'] = napo_lesson_get_download_block($node);
      }
      if (in_array('resources_required', $vars['preprocess_fields'])) {
        $vars['resources_required'] = napo_lesson_get_resources_required($node);
      }
    }
  }

  if($node->type == 'lesson') {
    if (!empty($vars['preprocess_fields'])) {
      // Right Menu.
      if (in_array('right_menu', $vars['preprocess_fields'])) {
        drupal_add_js(drupal_get_path('module', 'napo_lesson') . '/js/right_menu.js');
        $vars['right_menu'] = theme('right_menu', array());
      }
      // Top Menu
      if (in_array('top_menu', $vars['preprocess_fields'])) {
        drupal_add_js(drupal_get_path('module', 'napo_lesson') . '/js/top_menu.js');
        $lessons = views_get_view_result('lessons', 'block_1');
        $vars['top_menu'] = theme('top_menu', array(
          'node' => $node,
          'lessons' => $lessons,
        ));
      }

      if (in_array('resources_required', $vars['preprocess_fields'])) {
        $vars['resources_required'] = napo_lesson_get_resources_required($node);
      }
      if (in_array('download_block', $vars['preprocess_fields'])) {
        $vars['download_block'] = napo_lesson_get_download_block($node);
      }
      if (in_array('intro_block', $vars['preprocess_fields'])) {
        $vars['intro_block'] = napo_lesson_get_intro_block($node);
      }

      // Download whole lesson.
      if (in_array('download_whole_lesson', $vars['preprocess_fields'])
       && !empty($vars['field_lesson_video'][0]['target_id'])) {
        $vars['download_whole_lesson'] = theme('download_whole_lesson', array(
          'video_id' => $vars['field_lesson_video'][0]['target_id'],
        ));
      }
      if (in_array('toolkit_title', $vars['preprocess_fields'])) {
        $toolkit = node_load(_napo_lesson_get_toolkit_id($node->nid));
        if (!empty($toolkit)) {
          $title = field_get_items('node', $toolkit, 'title_field');
          $title = current($title)['safe_value'];
          $title = array(
            '#markup' => '<h2 class="napo-lesson-toolkit-title">' . $title . '</h2>',
            '#weight' => 0,
          );
          $vars['toolkit_title'] = drupal_render($title);
        }
      }
      if (in_array('lessons_note', $vars['preprocess_fields'])) {
        $note = variable_get('napo_lesson_note_text', '');
        $vars['lessons_note'] = t($note);
      }
    }
  }
}

/**
 * Implements hook_js_alter().
 *
 * Remove accordion from content
 */
function napo_lesson_js_alter(&$javascript) {
  if(arg(0) == 'node') {
    $node = node_load(arg(1));
    if($node && $node->type == 'lesson') {
      unset($javascript[drupal_get_path('module', 'wysiwyg_accordion').'/js/wysiwyg_accordion.js']);
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function napo_lesson_field_formatter_info() {
  $info = array(
    'first_lesson_link' => array(
      'label' => t('First Lesson Link'),
      'field types' => array('text'),
      'description' => t('Get the link of the first lesson in the lesson kit'),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function napo_lesson_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'first_lesson_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'napo_lesson_first_lesson_link',
          '#entity' => $entity,
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;
  }
  return $element;
}

/*
* Formats multilanguage file for download
*/
function theme_napo_lesson_first_lesson_link($element) {
  $entity = $element['entity'];
  $lesson = views_get_view_result('lessons', 'block_2', $entity->nid);

  $output = l($entity->title, 'node/'.$lesson[0]->nid);
  return $output;
}

/**
 * Callback for Download whole lesson button.
 */
function napo_lesson_download_video($nid) {
  global $language;
  $node = node_load($nid);
  if (!empty($node)) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $file = $wrapper->language($language->language)->field_video->value();
    if (!empty($file)) {
      $file = current($file);
      $headers = array(
        'Content-Type'              => $file['filemime'],
        'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file['uri']) . '"',
        'Content-Length'            => $file['filesize'],
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file['uri'], $headers);
    }
  }
  drupal_set_message(t("There was an error downloading the lesson's video!"), 'error');
  drupal_not_found();
}

/**
 * Function to get the toolkit id based on a lesson id.
 */
function _napo_lesson_get_toolkit_id($nid) {
  $toolkit_id = 0;
  $node = node_load($nid);
  $toolkit = field_get_items('node', $node, 'field_lesson_toolkit');
  if (!empty($toolkit)) {
    $toolkit_id = $toolkit[0]['target_id'];
  }
  return $toolkit_id;
}
