<?php
/**
 * @file
 * Code for the Napo Film feature.
 */

include_once 'napo_film.features.inc';
include_once 'napo_film.formatter.inc';
include_once 'napo_film.cart.inc';

define('NAPO_FILM_DOWN_CENTER_PATH', 'public://napo_films_download_center');

/**
 * Implements hook_entity_info_alter().
 */
function napo_film_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['film_main_video_teaser'] = array(
    'label' => t('Film Video teaser'),
    'custom settings' => FALSE,
  );
  $entity_info['node']['view modes']['episode_full'] = array(
    'label' => t('Episode full'),
    'custom settings' => FALSE,
  );
  $entity_info['node']['view modes']['episode_popup'] = array(
    'label' => t('Episode popup'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_menu().
 */
function napo_film_menu() {
  $items = array();
  // Episode overlay menu item.
  $items['napo_film/ajax/episode/%'] = array(
    'title' => 'Get episode',
    'page callback' => 'napo_film_render_episode',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['napo_film/ajax/select_in_cart/%'] = array(
    'title' => 'Select in cart',
    'page callback' => 'napo_film_cart_select_in_cart_callback',
    'page arguments' => array(3),
    'access callback' => TRUE,
  );
  $items['napo_film/set_view_mode/%'] = array(
    'title' => 'Get episode',
    'page callback' => 'napo_film_set_view_mode',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function napo_film_menu_alter(&$items) {
  // Add access callback for Reorder episodes tab.
  $items['node/%/reorder_episodes']['access callback'] = 'napo_film_reoder_episodes_acess_callback';
}

/**
 * Implements hook_module_implements_alter().
 */
function napo_film_module_implements_alter(&$implementations, $hook) {
  // Run our hook after the views hook.
  if ($hook == 'menu_alter') {
    if (isset($implementations['napo_film'])) {
      unset($implementations['napo_film']);
      $implementations['napo_film'] = FALSE;
    }
  }
}

/**
 * Implements hook_cron().
 */
function napo_film_cron() {
  // Remove old zips created for Download centre.
  $zips = file_scan_directory(NAPO_FILM_DOWN_CENTER_PATH, '/.*\.zip$/');
  if (!empty($zips)) {
    foreach (array_keys($zips) as $zip) {
      if (filemtime(drupal_realpath($zip)) < strtotime("-1 week")) {
        drupal_unlink($zip);
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function napo_film_block_info() {
  // View modes links block.
  // Add List and Grid links for napo films view.
  $blocks['napo_films_view_modes'] = array(
    'info' => t('Napo film view modes'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['download_cart_form'] = array(
    'info' => t('Download centre cart form'),
  );


  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function napo_film_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'download_cart_form':
      $form = drupal_get_form('napo_film_cart_download_form');
      $header = drupal_render($form);
      $block['content'] = $header;
      break;

    case 'napo_films_view_modes':
      // View modes links block.
      $block['subject'] = t('Napo film view modes');
      $attr = array(
        'class' => array('napo-film-view-mode-links'),
        'rel' => 'nofollow',
      );
      $attr_grid = $attr;
      // Set active mode.
      if (isset($_SESSION['napo_films_view_mode']) && $_SESSION['napo_films_view_mode'] == 'grid') {
        $attr_grid['class'][] = "active";
      }
      else {
        $attr['class'][] = "active";
      }
      // Get query params to preserve them.
      $query = drupal_get_query_parameters();
      $block['content']['list']['#markup'] = l(t('List view'), 'napo_film/set_view_mode/list', array('attributes' => $attr, 'query' => $query));
      $block['content']['grid']['#markup'] = l(t('Gallery view'), 'napo_film/set_view_mode/grid', array('attributes' => $attr_grid, 'query' => $query));
      break;
  }
  return $block;
}

/**
 * Callback for view modes links.
 */
function napo_film_set_view_mode($mode) {
  // Set the session accordingly.
  if ($mode == 'list') {
    $_SESSION['napo_films_view_mode'] = 'list';
  }
  else {
    $_SESSION['napo_films_view_mode'] = 'grid';
  }
  $view = views_get_view('napo_films', TRUE);
  $url = $view->display['page_list']->display_options['path'];
  $query = drupal_get_query_parameters();
  // Redirect to view to reload the page.
  drupal_goto($url, array('query' => $query));
}

/**
 * Implements hook_views_pre_view().
 */
function napo_film_views_pre_view( view &$view, &$display_id, &$args) {
  if ($view->name == 'napo_films') {
    if (isset($_SESSION['napo_films_view_mode']) && $_SESSION['napo_films_view_mode'] == 'grid') {
      $view->set_display('page_grid');
    }
    else {
      $view->set_display('page_list');
    }

    // When searching (word or tag) in Film page, episode should be included.
    // Alter the filter to include films and episodes video type.
    $params = drupal_get_query_parameters();
    if (!empty($params['search_api_views_fulltext'])
      || !empty($params['f'])) {
      $view_filters = $view->display_handler->get_option('filters');
      $view_filters['field_video_type']['value'] = drupal_map_assoc(napo_film_get_video_types_tid());
      $overrides = array();
      $overrides['filters'] = $view_filters;
      foreach ($overrides as $option => $definition) {
        $view->display_handler->override_option($option, $definition);
      }
    }
  }
}


/**
 * Access callback for Reorder episodes tab.
 */
function napo_film_reoder_episodes_acess_callback($options) {
  // Run the default access callback.
  $access_callback = $options[0];
  $access_arguments = $options[1];
  $access = call_user_func_array($access_callback, $access_arguments);
  if (!$access) {
    return FALSE;
  }
  // Reorder menu only for films.
  $node = node_load(arg(1));
  if ($node && $node->type == 'napo_video' && napo_film_video_get_type($node) == 'film') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for ajax call for rendering episode overlay.
 */
function napo_film_render_episode($nid) {
  $node = node_load($nid);
  $commands = array();
  if (!empty($node)) {
    // Unset title not to show in node_view.
    $node->title = NULL;
    $render_node = node_view($node, 'episode_popup');
    // Unset the title, use it in template (modal header).
    unset($render_node['title_field']);
    $display_settings = array(
      'label' => 'hidden',
      'type' => 'title_linked',
      'settings' => array(
        'napo_film_title_include_type' => 1,
        'napo_film_title_include_episode_count' => 1,
        'title_style' => 'div',
      ),
    );
    $title_episode = field_view_field('node', $node, 'title_field', $display_settings);
    $content = theme('napo_film_ajax_episode', array(
      'content' => drupal_render($render_node),
      'title' => render($title_episode),
      'nid' => $nid,
      )
    );
    $commands[] = ajax_command_invoke('.modal', 'modal', array('hide'));
    $commands[] = ajax_command_remove('#ajax-episode-' . $nid);
    $commands[] = ajax_command_append('body', $content);
    $commands[] = ajax_command_invoke('#ajax-episode-' . $nid, 'modal');
  }
  drupal_alter('napo_film_render_episode', $commands);
  $page = array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
  ajax_deliver($page);
}

/**
 * Implements hook_theme().
 */
function napo_film_theme() {
  return array(
    'napo_film_ajax_episode' => array(
      'variables' => array(
        'content' => '',
        'title' => '',
        'nid' => '',
      ),
      'template' => 'theme/napo_film_ajax_episode',
    ),
    'napo_film_share_widget' => array(
      'variables' => array(
        'url' => '',
        'node' => array(),
      ),
      'template' => 'theme/napo_film_share_widget',
    ),
    'napo_film_recommended_films' => array(
      'variables' => array(
        'node' => array(),
      ),
      'template' => 'theme/napo_film_recommended_films',
    ),
    'napo_film_download_cart_complete' => array(
      'variables' => array(
        'file_path' => '',
        'message' => '',
      ),
      'template' => 'theme/napo_film_download_cart_complete',
    ),
    'napo_film_download_cart_error' => array(
      'variables' => array(
        'error' => '',
      ),
      'template' => 'theme/napo_film_download_cart_error',
    ),
    'napo_film_tag_facet_link' => array(
      'variables' => array(
        'name' => '',
        'link' => '',
      ),
    ),
  );
}

/**
 * Get taxonomies ids for video types.
 */
function napo_film_get_video_types_tid() {
  $types['episode'] = variable_get('napo_film_episode_type_tid', 2726);
  $types['film'] = variable_get('napo_film_film_type_tid', 2727);
  return $types;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function napo_film_form_napo_video_node_form_alter(&$form, &$form_state) {
  // Show napo film field only for video type - Episode video.
  $types = napo_film_get_video_types_tid();
  $form['field_combined_tags']['#access'] = FALSE;
  $form['field_napo_film'] += array(
    '#states' => array(
      'visible' => array(
        'select[name^="field_video_type"]' => array('value' => $types['episode']),
      ),
    ),
  );
  // Show main tag field only for video type - Film video.
  $form['field_main_tag'] += array(
    '#states' => array(
      'visible' => array(
        'select[name^="field_video_type"]' => array('value' => $types['film']),
      ),
    ),
  );
  // Show publication date only for episodes.
  $form['field_publication_date'] += array(
    '#states' => array(
      'visible' => array(
        'select[name^="field_video_type"]' => array('value' => $types['film']),
      ),
    ),
  );
}

function napo_film_video_get_type($node) {
  $types = napo_film_get_video_types_tid();
  $type = field_get_items('node', $node, 'field_video_type');
  if (!empty($type)) {
    $type = current($type);
    switch ($type['tid']) {
      case $types['episode']:
        return 'episode';

      case $types['film']:
        return 'film';
    }
  }
  return NULL;
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function napo_film_entity_view_mode_alter(&$view_mode, $context) {
  if ($context['entity_type'] == 'node'
    && $context['entity']->type == 'napo_video') {
    $type = napo_film_video_get_type($context['entity']);
    if ($view_mode == 'full') {
      switch ($type) {
        case 'episode':
          // Change view mode for episode full.
          $view_mode = 'episode_full';
          break;
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function napo_film_node_submit($node, $form, &$form_state) {
  $type = napo_film_video_get_type($node);
  if ($type == 'episode') {
    if (!empty($node->field_napo_film[LANGUAGE_NONE][0]['target_id'])) {
      $film = node_load($node->field_napo_film[LANGUAGE_NONE][0]['target_id']);
      $main_tag = field_get_items('node', $film, 'field_main_tag');
      drupal_set_message("Main Tag synced with episode's film!", 'warning');
      $node->field_main_tag[LANGUAGE_NONE] = $main_tag;

      $publ_date = field_get_items('node', $film, 'field_publication_date');
      if (!empty($publ_date)) {
        $node->field_publication_date[LANGUAGE_NONE] = $publ_date;
        drupal_set_message("Publication date synced with episode's film!", 'warning');
      }
    }
  }
  elseif ($type == 'film') {
    // Remove film reference if video is type Film.
    if (!empty($node->field_napo_film[LANGUAGE_NONE])) {
      drupal_set_message('Napo film removed from film. Only episodes can have films.', 'warning');
      $node->field_napo_film = array();
    }
  }
  $combined_tags = array();
  if (!empty($node->field_main_tag[LANGUAGE_NONE])) {
    $combined_tags = array_merge($combined_tags, $node->field_main_tag[LANGUAGE_NONE]);
  }
  if (!empty($node->field_tags[LANGUAGE_NONE])) {
    $combined_tags = array_merge($combined_tags, $node->field_tags[LANGUAGE_NONE]);
  }
  if (!empty($combined_tags)) {
    $node->field_combined_tags[LANGUAGE_NONE] = $combined_tags;
  }
}

/**
 * Implements hook_node_validate().
 */
function napo_film_node_validate($node, $form, &$form_state) {
  $type = napo_film_video_get_type($node);
  if ($type == 'film') {
    // For films. main category is required.
    if (empty($node->field_main_tag[LANGUAGE_NONE][0]['tid'])) {
      form_set_error('field_main_tag', t('Main category field is required!'));
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function napo_film_preprocess_node(&$vars) {
  $node = $vars['node'];
  $view_mode = $vars['view_mode'];
  switch ($node->type) {
    case 'napo_video':
      if (!empty($vars['preprocess_fields'])) {
        // Render the ds episode list field from episode detail.
        if (in_array('episode_list_episode', $vars['preprocess_fields'])) {
          $film = field_get_items('node', $node, 'field_napo_film');
          if (!empty($film)) {
            $film = current($film)['target_id'];
            $fields = ds_get_fields('node');
            $label = $fields['episode_list_episode']['title'];
            if ($view_mode == 'episode_full') {
              $film_node = node_load($film);
              $film_wrapper = entity_metadata_wrapper('node', $film_node);
              $film_title = l($film_wrapper->title->value(), 'node/' . $film_node->nid);
              $label = t('View other episodes from film !film', array('!film' => $film_title));
              $vars['episode_list_episode'] = '<div class="episode-list-label">' . $label . '</div>';
              $vars['episode_list_episode'] .= views_embed_view('episode_list', 'block_2', $film);
            }
            else {
              $vars['episode_list_episode'] = '<div class="episode-list-label">' . $label . '</div>';
              $vars['episode_list_episode'] .= views_embed_view('episode_list', 'block_1', $film);
            }
          }
        }
        // Add share widget ds field.
        if (in_array('download_video_form', $vars['preprocess_fields'])) {
          $form = drupal_get_form('napo_film_episode_download_form', $node, $view_mode);
          $vars['download_video_form'] = drupal_render($form);
        }
        // Render the ds recommended films.
        if (in_array('recommended_films', $vars['preprocess_fields'])) {
          napo_film_recommended_films($vars);
          $vars['recommended_films'] = theme('napo_film_recommended_films', array(
              'vars' => $vars,
            )
          );
        }
        // This is the second title used in full view modes.
        if (in_array('napo_film_title', $vars['preprocess_fields'])) {
          // Set formatter settings.
          $display_settings = array(
            'label' => 'hidden',
            'type' => 'title_linked',
            'settings' => array(
              'napo_film_title_include_type' => 1,
              'napo_film_title_include_episode_count' => 1,
              'title_class' => array('napo-film-title-2'),
              'title_style' => 'div',
            ),
          );
          $title_episode = field_view_field('node', $node, 'title_field', $display_settings);
          $vars['napo_film_title'] = drupal_render($title_episode);
        }
      }
  }
}

/**
 * Get episodes nids of a node napo_video type film.
 */
function napo_film_get_episodes($node) {
  $episodes =  &drupal_static(__FUNCTION__);
  if (!isset($episodes[$node->nid])) {
    $episodes[$node->nid] = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'napo_video')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_napo_film', 'target_id', $node->nid);
    $result = $query->execute();
    if (isset($result['node'])) {
      $episodes[$node->nid] = array_keys($result['node']);
    }
  }
  return $episodes[$node->nid];
}

/**
 * Get the weight of an episode form draggable views.
 */
function napo_film_get_episode_number($node) {
  $film = field_get_items('node', $node, 'field_napo_film');
  $weight = -1;
  if (!empty($film)) {
    $film = current($film)['target_id'];
    $result = db_select('draggableviews_structure', 'dws')
      ->fields('dws', array('weight'))
      ->condition('entity_id', $node->nid)
      ->condition('args', '["' . $film . '"]')
      ->execute()
      ->fetchAllKeyed(0, 0);
    if (!empty($result)) {
      $weight = current($result);
    }
  }
  return $weight;
}

/**
 * Get a number of films with the same field_main_tags or field_tags
 */
function napo_film_recommended_films(&$vars) {
  $term = taxonomy_get_term_by_name('Film video');
  $term = !empty($term)? current($term): '';

  // Get 3 related films by field_main_tag
  $tags_tids = array();
  if (!empty($vars['field_main_tag'])) {
    $tags_tids = $vars['field_main_tag'][LANGUAGE_NONE];
  }
  if (!empty($tags_tids)) {
    // Query all films with the same field_main_tag
    $tids = array();
    foreach ($tags_tids as $tid) {
      array_push($tids, $tid['tid']);
    }
    $query = new EntityFieldQuery();
    // exclude self
    $excluded_nids = array();
    array_push($excluded_nids, $vars['node']->nid);
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'napo_video')
      ->entityCondition('entity_id', $excluded_nids, 'NOT IN')
      ->fieldCondition('field_main_tag', 'tid', $tids, 'IN')
      ->fieldCondition('field_video_type', 'tid', $term->tid, '=');
      // Publication date is not mandatory and the empty values are excluded from query
      //->fieldOrderBy('field_publication_date', 'value', 'DESC');
    $result = $query->execute();
    $limit = 3;
    global $user;
    $count = 0;
    if (!empty($result)) {
      $vars['recommended_films_nodes'] = array();
      foreach ($result['node'] as $n) {
        $node = node_load($n->nid);
        if ($node->status == 0 ) {
          // add unpublished only for admin, do not include in count
          if (OshaWorkflowPermissions::userHasRole('administrator', $user)) {
            $vars['recommended_films_nodes'][] = node_view($node,'recommended_films');
          }
        } else {
          $vars['recommended_films_nodes'][] = node_view($node,'recommended_films');
          $count++;
        }
        if ($count == $limit) {
          // max 3 related films
          break;
        }
      }
    }

    // Query all films with the same field_tags if the limit was not touched
    $secondary_limit = $limit - $count;
    if ($secondary_limit > 0) {
      $query = new EntityFieldQuery();

      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'napo_video')
        ->entityCondition('entity_id', $excluded_nids, 'NOT IN')
        ->fieldCondition('field_main_tag', 'tid', $tids, 'NOT IN')
        ->fieldCondition('field_tags', 'tid', $tids, 'IN')
        ->fieldCondition('field_video_type', 'tid', $term->tid, '=');
        //->fieldOrderBy('field_publication_date', 'value', 'DESC');

      $result = $query->execute();
      $count = 0;
      if (!empty($result)) {
        foreach ($result['node'] as $n) {
          $node = node_load($n->nid);
          if ($node->status == 0) {
            // add unpublished only for admin, do not include in count
            if (OshaWorkflowPermissions::userHasRole('administrator', $user)) {
              $vars['recommended_films_nodes'][] = node_view($node, 'recommended_films');
            }
          }
          else {
            $vars['recommended_films_nodes'][] = node_view($node, 'recommended_films');
            $count++;
          }
          if ($count == $secondary_limit) {
            break;
          }
        }
      }
    }
  }
}

/**
 * Function to get combined tags as field renderable array.
 */
function napo_film_combined_tags_view_field($node, $settings = array()) {
  $combined = array();
  // Merge the tags from both fields.
  $tags = field_get_items('node', $node, 'field_combined_tags');
  if (!empty($tags)) {
    $combined = array_merge($combined, $tags);
  }
  $tags = field_get_items('node', $node, 'field_tags');
  if (!empty($tags)) {
    $combined = array_merge($combined, $tags);
  }

  $links = array();
  foreach ($combined as $tid) {
    $term = taxonomy_term_load($tid['tid']);
    $query = array('f' => array(
        'field_main_tag:' . $term->tid,
        'field_tags:' . $term->tid,
      ),
    );
    $links[] = l($term->name, 'napos-films/films', array('query' => $query));
  }
  return implode(' | ', $links);
}

/**
 * Implements hook_forms().
 */
function napo_film_forms($form_id) {
  // Alter download form to be able to render forms in views.
  if (preg_match('/^napo_film_episode_download_form_\d+$/', $form_id)) {
    return array(
      $form_id => array(
        'callback' => 'napo_film_episode_download_form',
      ),
    );
  }
  if (preg_match('/^napo_film_cart_add_mime_form_\d+$/', $form_id)) {
    return array(
      $form_id => array(
        'callback' => 'napo_film_cart_add_mime_form',
      ),
    );
  }
}

/**
 * Form for downloading a field_video file in available formats.
 */
function napo_film_episode_download_form($form, &$form_state, $node, $view_mode = '') {
  $form['#prefix'] = '<div class="napo-film-video-download-form">';
  $form['#suffix'] = '</div>';
  $form['download_format'] = array(
    '#type' => 'radios',
    '#options' => napo_film_get_films_formats_as_options($node),
    '#attributes' => array(
      'onchange' => "form.submit('download_format')",
    ),
  );
  $form['download'] = array(
    '#type' => 'submit',
    '#value' => t('Download'),
    '#attributes' => array(
      'style' => 'display: none;',
    ),
  );
  $form['#prefix'] .= '<span class="napo-film-video-download-form-title"><span class="glyphicon glyphicon-download-alt"></span></span>';

  return $form;
}

function napo_film_episode_download_form_validate($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  $format = $form_state['values']['download_format'];
  $file = napo_film_get_film_file_by_mimetype($node, $format);
  if (empty($file)) {
    drupal_set_message(t('The film is not present in the specified format!'), 'warning');
    drupal_goto('/');
  }
}

/**
 * Download video form submit callback.
 */
function napo_film_episode_download_form_submit($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  $format = $form_state['values']['download_format'];
  $file = napo_film_get_film_file_by_mimetype($node, $format);
  $headers = array(
    'Content-Type'              => $file->filemime,
    'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file->uri) . '"',
    'Content-Length'            => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma'                    => 'no-cache',
    'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
    'Expires'                   => '0',
    'Accept-Ranges'             => 'bytes',
  );
  file_transfer($file->uri, $headers);
}

/**
 * Get a file obj from a node's field_video by mime type.
 */
function napo_film_get_film_file_by_mimetype($node, $mime) {
  $items = field_get_items('node', $node, 'field_video');
  foreach ($items as $item) {
    if ($item['filemime'] == $mime) {
      return (object) $item;
    }
  }
  return NULL;
}

/**
 * Get options array with $node's available video formats.
 */
function napo_film_get_films_formats_as_options($node) {
  $items = field_get_items('node', $node, 'field_video');
  $mimes = napo_film_shown_video_mimes();
  $options = array();
  foreach ($items as $item) {
    if (in_array($item['filemime'], array_keys($mimes))) {
      $options[$item['filemime']] = napo_film_get_type_label_by_mime($item['filemime']);
    }
  }
  // Sort options with default mimes order.
  $options = array_intersect_key($mimes, $options);
  return $options;
}

/**
 * Get labels for available video formats.
 */
function napo_film_get_type_label_by_mime($mime) {
  $types = napo_film_get_video_mimes();
  if (!empty($types[$mime])) {
    return $types[$mime];
  }
  else {
    return $mime;
  }
}

function napo_film_get_video_mimes() {
  return array(
    'video/mp4' => 'MP4',
    'video/x-ms-wmv' => 'WMV',
    'video/x-msvideo' => 'AVI',
    'video/ogg' => 'OGV',
    'video/webm' => 'WEBM',
  );
}

function napo_film_shown_video_mimes() {
  return array(
    'video/mp4' => 'MP4',
    'video/x-ms-wmv' => 'WMV',
  );
}

function napo_film_preprocess_html(&$vars) {
  // For napo-films, the page is a view and the text is a nodeblock
  // Use node title as the view page title.
  // Using metatag module, the drupal_set_title is not working.
  $view = views_get_page_view();
  if (!empty($view) && $view->name == 'napo_films') {
    $node = node_load(23);
    $wrapper = entity_metadata_wrapper('node', $node);
    $vars['head_title_array']['title'] = $wrapper->label();
    $vars['head_title'] = $wrapper->label() . ' ' . $vars['head_title'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function napo_film_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-napo-films-page-list') {
    if (!empty($form['search_api_views_fulltext'])) {
      $query_params = drupal_get_query_parameters();
      if (!empty($query_params['f'])) {
        $f_params = $query_params['f'];

        foreach ($f_params as $f_param) {
          if (strpos($f_param, 'field_combined_tags:') !== FALSE) {
            $tid = explode(':', $f_param)[1];
            $term = taxonomy_term_load($tid);
            $form['#prefix'] = theme('napo_film_tag_facet_link',
              array(
                'name' => $term->name,
                'link' => drupal_get_path_alias(),
              )
            );
            break;
          }
        }
      }
    }
  }
}

function theme_napo_film_tag_facet_link($variables) {
  return l('X ' . $variables['name'], $variables['link']);
}
