<?php
/**
 * @file
 * Code for the Napo Film feature.
 */

include_once 'napo_film.features.inc';
include_once 'napo_film.formatter.inc';

/**
 * Implements hook_entity_info_alter().
 */
function napo_film_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['film_main_video_teaser'] = array(
    'label' => t('Film Video teaser'),
    'custom settings' => FALSE,
  );
  $entity_info['node']['view modes']['episode_full'] = array(
    'label' => t('Episode full'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_menu().
 */
function napo_film_menu() {
  $items = array();
  // Episode overlay menu item.
  $items['napo_film/ajax/episode/%'] = array(
    'title' => 'Get episode',
    'page callback' => 'napo_film_render_episode',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  $items['napo_film/set_view_mode/%'] = array(
    'title' => 'Get episode',
    'page callback' => 'napo_film_set_view_mode',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function napo_film_menu_alter(&$items) {
  // Add access callback for Reorder episodes tab.
  $items['node/%/reorder_episodes']['access callback'] = 'napo_film_reoder_episodes_acess_callback';
}

/**
 * Implements hook_module_implements_alter().
 */
function napo_film_module_implements_alter(&$implementations, $hook) {
  // Run our hook after the views hook.
  if ($hook == 'menu_alter') {
    if (isset($implementations['napo_film'])) {
      unset($implementations['napo_film']);
      $implementations['napo_film'] = FALSE;
    }
  }
}

/**
 * Implements hook_block_info().
 */
function napo_film_block_info() {
  // View modes links block.
  // Add List and Grid links for napo films view.
  $blocks['napo_films_view_modes'] = array(
    'info' => t('Napo film view modes'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function napo_film_block_view($delta = '') {
  $block = array();
  // View modes links block.
  if ($delta == 'napo_films_view_modes') {
    $block['subject'] = t('Napo film view modes');
    $attr = array(
      'class' => array('napo-film-view-mode-links'),
      'rel' => 'nofollow',
    );
    $attr_grid = $attr;
    // Set active mode.
    if (isset($_SESSION['napo_films_view_mode']) && $_SESSION['napo_films_view_mode'] == 'grid') {
      $attr_grid['class'][] = "active";
    }
    else {
      $attr['class'][] = "active";
    }
    // Get query params to preserve them.
    $query = drupal_get_query_parameters();
    $block['content']['list']['#markup'] = l(t('List'), 'napo_film/set_view_mode/list', array('attributes' => $attr, 'query' => $query));
    $block['content']['grid']['#markup'] = l(t('Grid'), 'napo_film/set_view_mode/grid', array('attributes' => $attr_grid, 'query' => $query));
  }
  return $block;
}

/**
 * Callback for view modes links.
 */
function napo_film_set_view_mode($mode) {
  // Set the session accordingly.
  if ($mode == 'grid') {
    $_SESSION['napo_films_view_mode'] = 'grid';
  }
  else {
    $_SESSION['napo_films_view_mode'] = 'list';
  }
  $view = views_get_view('napo_films', TRUE);
  $url = $view->display['page_list']->display_options['path'];
  $query = drupal_get_query_parameters();
  // Redirect to view to reload the page.
  drupal_goto($url, array('query' => $query));
}

/**
 * Implements hook_views_pre_view().
 */
function napo_film_views_pre_view( view &$view, &$display_id, &$args) {
  if ($view->name == 'napo_films') {
    if (isset($_SESSION['napo_films_view_mode']) && $_SESSION['napo_films_view_mode'] == 'grid') {
      $view->set_display('page_grid');
    }
    else {
      $view->set_display('page_list');
    }
  }
}


/**
 * Access callback for Reorder episodes tab.
 */
function napo_film_reoder_episodes_acess_callback($options) {
  // Run the default access callback.
  $access_callback = $options[0];
  $access_arguments = $options[1];
  $access = call_user_func_array($access_callback, $access_arguments);
  if (!$access) {
    return FALSE;
  }
  // Reorder menu only for films.
  $node = node_load(arg(1));
  if ($node && $node->type == 'napo_video' && napo_film_video_get_type($node) == 'film') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Page callback for ajax call for rendering episode overlay.
 */
function napo_film_render_episode($nid) {
  $node = node_load($nid);
  $commands = array();
  if (!empty($node)) {
    // Unset title not to show in node_view.
    $node->title = NULL;
    $render_node = node_view($node, 'episode_full');
    // Unset the title, use it in template (modal header).
    unset($render_node['title_field']);
    $title = field_get_items('node', $node, 'title_field');
    $title = current($title)['value'];
    $content = theme('napo_film_ajax_episode', array(
      'content' => drupal_render($render_node),
      'title' => $title,
      'nid' => $nid,
      )
    );
    $commands[] = ajax_command_invoke('.modal', 'modal', array('hide'));
    $commands[] = ajax_command_remove('#ajax-episode-' . $nid);
    $commands[] = ajax_command_append('body', $content);
    $commands[] = ajax_command_invoke('#ajax-episode-' . $nid, 'modal');
  }
  drupal_alter('napo_film_render_episode', $commands);
  $page = array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
  ajax_deliver($page);
}

/**
 * Implements hook_theme().
 */
function napo_film_theme() {
  return array(
    'napo_film_ajax_episode' => array(
      'variables' => array(
        'content' => '',
        'title' => '',
        'nid' => '',
      ),
      'template' => 'theme/napo_film_ajax_episode',
    ),
    'napo_film_share_widget' => array(
      'variables' => array(
        'url' => '',
        'node' => array(),
      ),
      'template' => 'theme/napo_film_share_widget',
    ),
    'napo_film_recommended_films' => array(
      'variables' => array(
        'node' => array(),
      ),
      'template' => 'theme/napo_film_recommended_films',
    ),
  );
}

/**
 * Get taxonomies ids for video types.
 */
function napo_film_get_video_types_tid() {
  $types['episode'] = variable_get('napo_film_episode_type_tid', 2726);
  $types['film'] = variable_get('napo_film_film_type_tid', 2727);
  return $types;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function napo_film_form_napo_video_node_form_alter(&$form, &$form_state) {
  // Show napo film field only for video type - Episode video.
  $types = napo_film_get_video_types_tid();
  $form['field_napo_film'] += array(
    '#states' => array(
      'visible' => array(
        'select[name^="field_video_type"]' => array('value' => $types['episode']),
      ),
    ),
  );
  // Show main tag field only for video type - Film video.
  $form['field_main_tag'] += array(
    '#states' => array(
      'visible' => array(
        'select[name^="field_video_type"]' => array('value' => $types['film']),
      ),
    ),
  );
}

function napo_film_video_get_type($node) {
  $types = napo_film_get_video_types_tid();
  $type = field_get_items('node', $node, 'field_video_type');
  if (!empty($type)) {
    $type = current($type);
    switch ($type['tid']) {
      case $types['episode']:
        return 'episode';

      case $types['film']:
        return 'film';
    }
  }
  return NULL;
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function napo_film_entity_view_mode_alter(&$view_mode, $context) {
  if ($context['entity_type'] == 'node'
    && $context['entity']->type == 'napo_video') {
    $type = napo_film_video_get_type($context['entity']);
    if ($view_mode == 'full') {
      switch ($type) {
        case 'episode':
          // Change view mode for episode full.
          $view_mode = 'episode_full';
          break;
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function napo_film_node_submit($node, $form, &$form_state) {
  $type = napo_film_video_get_type($node);
  if ($type == 'episode') {
    // Remove main tag for videos Episodes.
    if (!empty($node->field_main_tag)) {
      drupal_set_message('Main Tag removed from Episode (inherited from film)!', 'warning');
      $node->field_main_tag = array();
    }
  }
  elseif ($type == 'film') {
    // Remove film reference if video is type Film.
    if (!empty($node->field_napo_film)) {
      drupal_set_message('Napo Film removed from Film. Only episodes can have films.', 'warning');
      $node->field_napo_film = array();
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function napo_film_preprocess_node(&$vars) {
  $node = $vars['node'];
  $view_mode = $vars['view_mode'];
  switch ($node->type) {
    case 'napo_video':
      if (!empty($vars['preprocess_fields'])) {
        if (in_array('combined_tags', $vars['preprocess_fields'])) {
          // Render the ds preprocess field to combined tags
          // from main_tag and tags.
          $combined_tags = napo_film_combined_tags_view_field($node);
          $vars['combined_tags'] = drupal_render($combined_tags);
        }
        // Render the ds episode list field from episode detail.
        if (in_array('episode_list_episode', $vars['preprocess_fields'])) {
          $film = field_get_items('node', $node, 'field_napo_film');
          if (!empty($film)) {
            $film = current($film)['target_id'];
            $fields = ds_get_fields('node');
            $label = $fields['episode_list_episode']['title'];
            $vars['episode_list_episode'] = '<div class="episode-list-label">' . $label . '</div>';
            $vars['episode_list_episode'] .= views_embed_view('episode_list', 'block_1', $film);
          }
        }
        // Add share widget ds field.
        if (in_array('share_widget', $vars['preprocess_fields'])) {
          // Add services javascript.
          drupal_add_js(drupal_get_path('module', 'napo_film') . '/js/share_widget.js');
          // Add facebook app key.
          $fb_app_key = variable_get('fb_app_key', '');
          drupal_add_js(array('napo_film' => array('fb_app_key' => $fb_app_key)), 'setting');

          $url = url('/node/' . $node->nid, array('absolute' => TRUE));
          $title = field_get_items('node', $node, 'title_field');
          $title = current($title)['value'];
          $site_name = variable_get('site_name', '');
          // Construct the tweet.
          $twitter_text = $title . ' | ' . $site_name;
          $tweet_url = url('https://twitter.com/intent/tweet', array(
            'query' => array(
              'original_referer' => $url,
              'text' => $twitter_text,
              'url' => shorten_url($url),
            ),
          ));
          $vars['share_widget'] = theme('napo_film_share_widget', array(
            'url' => $url,
            'tweet_url' => $tweet_url,
            'node' => $node,
            )
          );
        }
        // Add share widget ds field.
        if (in_array('download_video_form', $vars['preprocess_fields'])) {
          $form = drupal_get_form('napo_film_episode_download_form', $node, $view_mode);
          $vars['download_video_form'] = drupal_render($form);
        }
        // Render the ds recommended films
        if (in_array('recommended_films', $vars['preprocess_fields'])) {
          napo_film_recommended_films($vars);
          $vars['recommended_films'] = theme('napo_film_recommended_films', array(
              'vars' => $vars,
            )
          );
        }
      }
  }
}

/**
 * Get a number of films with the same field_main_tags or field_tags
 */
function napo_film_recommended_films(&$vars) {
  // Get 3 related films by field_main_tag
  $tags_tids = array();
  if (!empty($vars['field_main_tag'])) {
    $tags_tids = $vars['field_main_tag'][LANGUAGE_NONE];
  }
  if (!empty($tags_tids)) {
    // Query all films with the same field_main_tag
    $tids = array();
    foreach ($tags_tids as $tid) {
      array_push($tids, $tid['tid']);
    }
    $query = new EntityFieldQuery();
    // exclude self
    $excluded_nids = array();
    array_push($excluded_nids, $vars['node']->nid);
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'napo_video')
      ->entityCondition('entity_id', $excluded_nids, 'NOT IN')
      ->fieldCondition('field_main_tag', 'tid', $tids, 'IN');
      // Publication date is not mandatory and the empty values are excluded from query
      //->fieldOrderBy('field_publication_date', 'value', 'DESC');
    $result = $query->execute();
    $limit = 3;
    global $user;
    $count = 0;
    if (!empty($result)) {
      $vars['recommended_films_nodes'] = array();
      foreach ($result['node'] as $n) {
        $node = node_load($n->nid);
        if ($node->status == 0 ) {
          // add unpublished only for admin, do not include in count
          if (OshaWorkflowPermissions::userHasRole('administrator', $user)) {
            $vars['recommended_films_nodes'][] = node_view($node,'recommended_films');
          }
        } else {
          $vars['recommended_films_nodes'][] = node_view($node,'recommended_films');
          $count++;
        }
        if ($count == $limit) {
          // max 3 related films
          break;
        }
      }
    }

    // Query all films with the same field_tags if the limit was not touched
    $secondary_limit = $limit - $count;
    if ($secondary_limit > 0) {
      $query = new EntityFieldQuery();

      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'napo_video')
        ->entityCondition('entity_id', $excluded_nids, 'NOT IN')
        ->fieldCondition('field_main_tag', 'tid', $tids, 'NOT IN')
        ->fieldCondition('field_tags', 'tid', $tids, 'IN');
        //->fieldOrderBy('field_publication_date', 'value', 'DESC');
      $result = $query->execute();
      $count = 0;
      if (!empty($result)) {
        foreach ($result['node'] as $n) {
          $node = node_load($n->nid);
          if ($node->status == 0) {
            // add unpublished only for admin, do not include in count
            if (OshaWorkflowPermissions::userHasRole('administrator', $user)) {
              $vars['recommended_films_nodes'][] = node_view($node, 'recommended_films');
            }
          }
          else {
            $vars['recommended_films_nodes'][] = node_view($node, 'recommended_films');
            $count++;
          }
          if ($count == $secondary_limit) {
            break;
          }
        }
      }
    }
  }
}

/**
 * Function to get combined tags as field renderable array.
 */
function napo_film_combined_tags_view_field($node) {
  $combined = array();
  // Merge the tags from both fields.
  $main_tag = field_get_items('node', $node, 'field_main_tag');
  if (!empty($main_tag)) {
    $combined = array_merge($combined, $main_tag);
  }
  $tags = field_get_items('node', $node, 'field_tags');
  if (!empty($tags)) {
    $combined = array_merge($combined, $tags);
  }
  // Set display settings.
  $display_settings = array(
    'label' => 'inline',
    'type' => 'ds_taxonomy_separator_localized',
    'settings' => array(
      'taxonomy_term_link' => 0,
      'taxonomy_term_separator' => ' | ',
    ),
  );
  // Use field_tags to get the rendered combined fields.
  // Overwrite data from field_tags to be used in field_view_field.
  $field_tags = $node->field_tags;
  $node->field_tags[LANGUAGE_NONE] = $combined;
  // It uses label of field_tags and data from $combined and settings
  // from $display_settings.
  $field_combined = field_view_field('node', $node, 'field_tags', $display_settings);
  $node->field_tags = $field_tags;
  return $field_combined;
}

/**
 * Implements hook_forms().
 */
function napo_film_forms($form_id) {
  // Alter download form to be able to render forms in views.
  if (preg_match('/^napo_film_episode_download_form_\d+$/', $form_id)) {
    return array(
      $form_id => array(
        'callback' => 'napo_film_episode_download_form',
      ),
    );
  }
}

/**
 * Form for downloading a field_video file in available formats.
 */
function napo_film_episode_download_form($form, &$form_state, $node, $view_mode = '') {
  $form['#prefix'] = '<div class="napo-film-video-download-form">';
  $form['#suffix'] = '</div>';
  $form['download_format'] = array(
    '#type' => 'radios',
    '#options' => napo_film_get_films_formats_as_options($node),
    '#attributes' => array(
      'onchange' => "form.submit('download_format')",
    ),
  );
  $form['download'] = array(
    '#type' => 'submit',
    '#value' => t('Download'),
    '#attributes' => array(
      'style' => 'display: none;',
    ),
  );
  if ($view_mode == 'episode_full') {
    $form['download_format']['#type'] = 'select';
    $form['download_format']['#title'] = t('Download this film as');
    $form['download_format']['#default_value'] = 'video/mp4';
    unset($form['download_format']['#attributes']['onchange']);
    unset($form['download']['#attributes']['style']);
  }
  else {
    $form['#prefix'] .= '<span class="napo-film-video-download-form-title"><span class="glyphicon glyphicon-download-alt"></span></span>';
  }

  return $form;
}

function napo_film_episode_download_form_validate($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  $format = $form_state['values']['download_format'];
  $file = napo_film_get_film_file_by_mimetype($node, $format);
  if (empty($file)) {
    drupal_set_message(t('The film is not present in the specified format!'), 'warning');
    drupal_goto('/');
  }
}

/**
 * Download video form submit callback.
 */
function napo_film_episode_download_form_submit($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  $format = $form_state['values']['download_format'];
  $file = napo_film_get_film_file_by_mimetype($node, $format);
  $headers = array(
    'Content-Type'              => $file->filemime,
    'Content-Disposition'       => 'attachment; filename="' . drupal_basename($file->uri) . '"',
    'Content-Length'            => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma'                    => 'no-cache',
    'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
    'Expires'                   => '0',
    'Accept-Ranges'             => 'bytes',
  );
  file_transfer($file->uri, $headers);
}

/**
 * Get a file obj from a node's field_video by mime type.
 */
function napo_film_get_film_file_by_mimetype($node, $mime) {
  $items = field_get_items('node', $node, 'field_video');
  foreach ($items as $item) {
    if ($item['filemime'] == $mime) {
      return (object) $item;
    }
  }
  return NULL;
}

/**
 * Get options array with $node's available video formats.
 */
function napo_film_get_films_formats_as_options($node) {
  $items = field_get_items('node', $node, 'field_video');
  $options = array();
  foreach ($items as $item) {
    $options[$item['filemime']] = napo_film_get_type_label_by_mime($item['filemime']);
  }
  return $options;
}

/**
 * Get labels for available video formats.
 */
function napo_film_get_type_label_by_mime($mime) {
  $types = array(
    'video/x-ms-wmv' => 'WMV',
    'video/x-msvideo' => 'AVI',
    'video/ogg' => 'OGV',
    'video/webm' => 'WEBM',
    'video/mp4' => 'MP4',
  );
  if (!empty($types[$mime])) {
    return $types[$mime];
  }
  else {
    return $mime;
  }
}

function napo_film_preprocess_html(&$vars) {
  // For napo-films, the page is a view and the text is a nodeblock
  // Use node title as the view page title.
  // Using metatag module, the drupal_set_title is not working.
  $view = views_get_page_view();
  if (!empty($view) && $view->name == 'napo_films') {
    $node = node_load(23);
    $wrapper = entity_metadata_wrapper('node', $node);
    $vars['head_title_array']['title'] = $wrapper->label();
    $vars['head_title'] = $wrapper->label() . ' ' . $vars['head_title'];
  }
}

